//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Duett.API
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IController
    {
        /// <summary>Deletes an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETEAsync(int id);

        /// <summary>Patches an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to patch.</param>
        /// <param name="body">The operations to perform on ArticleCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCHAsync(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to replace.</param>
        /// <param name="body">The ArticleCreate to replace the old Article from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUTAsync(int id, ArticleCreate body);

        /// <summary>Gets all existing Article.</summary>
        /// <param name="extend">A list of keys on which to extend the Article, e.g. HourRegistrations, Metadata.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Article>> V1AllAsync(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new Article.</summary>
        /// <param name="body">The ArticleCreate to create a new Article from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Article> V1POSTAsync(ArticleCreate body);

        /// <summary>Deletes an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETE2Async(int id);

        /// <summary>Gets an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id to get Carrier for.</param>
        /// <param name="extend">A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Carrier> V1GETAsync(int id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Patches an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to patch.</param>
        /// <param name="body">The operations to perform on  CarrierCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCH2Async(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to replace.</param>
        /// <param name="body">The CarrierCreate to create a new Carrier from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUT2Async(int id, CarrierCreate body);

        /// <summary>Gets all existing Carrier.</summary>
        /// <param name="extend">A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Carrier>> V1All2Async(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new Carrier.</summary>
        /// <param name="body">The CarrierCreate to create a new Carrier from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Carrier> V1POST2Async(CarrierCreate body);

        /// <summary>Deletes an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETE3Async(int id);

        /// <summary>Gets an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<CarrierType> V1GET2Async(int id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Patches an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCH3Async(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUT3Async(int id, CarrierTypeCreate body);

        /// <summary>Gets all existing CarrierType.</summary>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CarrierType>> V1All3Async(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new CarrierType.</summary>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<CarrierType> V1POST3Async(CarrierTypeCreate body);

        /// <summary>Deletes an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETE4Async(int id);

        /// <summary>Gets an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id to get Customer for.</param>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Customer> V1GET3Async(int id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Patches an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to patch.</param>
        /// <param name="body">The operations to perform on CustomerCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCH4Async(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to replace.</param>
        /// <param name="body">The CustomerCreate to create a new Customer from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUT4Async(int id, CustomerCreate body);

        /// <summary>Gets all existing Customer.</summary>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> V1All4Async(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new Customer.</summary>
        /// <param name="body">The CustomerCreate to create a new Customer from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Customer> V1POST4Async(CustomerCreate body);

        /// <summary>Deletes an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETE5Async(int id);

        /// <summary>Gets an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id to get HourRegistration for.</param>
        /// <param name="extend">A list of keys on which to extend the HourRegistration, e.g. Article,Customer, Carriers.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<HourRegistration> V1GET4Async(int id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Patches an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to patch.</param>
        /// <param name="body">The operations to perform onHourRegistrationCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCH5Async(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to replace.</param>
        /// <param name="body">The HourRegistrationCreate to create a new HourRegistration from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUT5Async(int id, HourRegistrationCreate body);

        /// <summary>Gets all existing HourRegistration.</summary>
        /// <param name="extend">A list of keys on which to extend the HourRegistration, e.g. Article, Customer.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HourRegistration>> V1All5Async(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new HourRegistration.</summary>
        /// <param name="body">The HourRegistrationCreate to create a new HourRegistration from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<HourRegistration> V1POST5Async(HourRegistrationCreate body);

        /// <summary>Gets an existing HourRegistrationDocument given the specified Id.</summary>
        /// <param name="id">The Id to get HourRegistrationDocument for.</param>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Orders (not implemented).</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<HourRegistrationDocument> V1GET5Async(System.Guid id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Creates a new HourRegistrationDocument.</summary>
        /// <param name="body">The HourRegistrationDocumentCreate to create a new HourRegistrationDocument from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<string> V1POST6Async(HourRegistrationDocumentCreate body);

        /// <summary>Deletes an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to delete.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1DELETE6Async(int id);

        /// <summary>Gets an existing Project given the specified Id.</summary>
        /// <param name="id">The Id to get Project for.</param>
        /// <param name="extend">A list of keys on which to extend the Project.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Project> V1GET6Async(int id, System.Collections.Generic.IEnumerable<string> extend);

        /// <summary>Patches an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to patch.</param>
        /// <param name="body">The operations to perform onProjectCreate.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PATCH6Async(int id, System.Collections.Generic.IEnumerable<JsonPatchOperation> body);

        /// <summary>Replaces an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to replace.</param>
        /// <param name="body">The ProjectCreate to create a new Project from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task V1PUT6Async(int id, ProjectCreate body);

        /// <summary>Gets all existing Project.</summary>
        /// <param name="extend">A list of keys on which to extend the Project.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> V1All6Async(System.Collections.Generic.IEnumerable<string> extend, object filter);

        /// <summary>Creates a new Project.</summary>
        /// <param name="body">The ProjectCreate to create a new Project from.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<Project> V1POST7Async(ProjectCreate body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>Deletes an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Article/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE(int id)
        {
            return _implementation.V1DELETEAsync(id);
        }

        /// <summary>Patches an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to patch.</param>
        /// <param name="body">The operations to perform on ArticleCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("Article/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCHAsync(id, body);
        }

        /// <summary>Replaces an existing Article given the specified Id.</summary>
        /// <param name="id">The Id of the Article to replace.</param>
        /// <param name="body">The ArticleCreate to replace the old Article from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("Article/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT(int id, [Microsoft.AspNetCore.Mvc.FromBody] ArticleCreate body)
        {
            return _implementation.V1PUTAsync(id, body);
        }

        /// <summary>Gets all existing Article.</summary>
        /// <param name="extend">A list of keys on which to extend the Article, e.g. HourRegistrations, Metadata.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Article/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Article>> V1All([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1AllAsync(extend, filter);
        }

        /// <summary>Creates a new Article.</summary>
        /// <param name="body">The ArticleCreate to create a new Article from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Article/v1")]
        public System.Threading.Tasks.Task<Article> V1POST([Microsoft.AspNetCore.Mvc.FromBody] ArticleCreate body)
        {
            return _implementation.V1POSTAsync(body);
        }

        /// <summary>Deletes an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Carrier/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE2(int id)
        {
            return _implementation.V1DELETE2Async(id);
        }

        /// <summary>Gets an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id to get Carrier for.</param>
        /// <param name="extend">A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Carrier/v1/{id}")]
        public System.Threading.Tasks.Task<Carrier> V1GET(int id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GETAsync(id, extend);
        }

        /// <summary>Patches an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to patch.</param>
        /// <param name="body">The operations to perform on  CarrierCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("Carrier/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH2(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCH2Async(id, body);
        }

        /// <summary>Replaces an existing Carrier given the specified Id.</summary>
        /// <param name="id">The Id of the Carrier to replace.</param>
        /// <param name="body">The CarrierCreate to create a new Carrier from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("Carrier/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT2(int id, [Microsoft.AspNetCore.Mvc.FromBody] CarrierCreate body)
        {
            return _implementation.V1PUT2Async(id, body);
        }

        /// <summary>Gets all existing Carrier.</summary>
        /// <param name="extend">A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Carrier/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Carrier>> V1All2([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1All2Async(extend, filter);
        }

        /// <summary>Creates a new Carrier.</summary>
        /// <param name="body">The CarrierCreate to create a new Carrier from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Carrier/v1")]
        public System.Threading.Tasks.Task<Carrier> V1POST2([Microsoft.AspNetCore.Mvc.FromBody] CarrierCreate body)
        {
            return _implementation.V1POST2Async(body);
        }

        /// <summary>Deletes an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE3(int id)
        {
            return _implementation.V1DELETE3Async(id);
        }

        /// <summary>Gets an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1/{id}")]
        public System.Threading.Tasks.Task<CarrierType> V1GET2(int id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GET2Async(id, extend);
        }

        /// <summary>Patches an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH3(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCH3Async(id, body);
        }

        /// <summary>Replaces an existing CarrierType given the specified Id.</summary>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT3(int id, [Microsoft.AspNetCore.Mvc.FromBody] CarrierTypeCreate body)
        {
            return _implementation.V1PUT3Async(id, body);
        }

        /// <summary>Gets all existing CarrierType.</summary>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CarrierType>> V1All3([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1All3Async(extend, filter);
        }

        /// <summary>Creates a new CarrierType.</summary>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("CarrierType/v1")]
        public System.Threading.Tasks.Task<CarrierType> V1POST3([Microsoft.AspNetCore.Mvc.FromBody] CarrierTypeCreate body)
        {
            return _implementation.V1POST3Async(body);
        }

        /// <summary>Deletes an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Customer/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE4(int id)
        {
            return _implementation.V1DELETE4Async(id);
        }

        /// <summary>Gets an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id to get Customer for.</param>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Customer/v1/{id}")]
        public System.Threading.Tasks.Task<Customer> V1GET3(int id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GET3Async(id, extend);
        }

        /// <summary>Patches an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to patch.</param>
        /// <param name="body">The operations to perform on CustomerCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("Customer/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH4(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCH4Async(id, body);
        }

        /// <summary>Replaces an existing Customer given the specified Id.</summary>
        /// <param name="id">The Id of the Customer to replace.</param>
        /// <param name="body">The CustomerCreate to create a new Customer from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("Customer/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT4(int id, [Microsoft.AspNetCore.Mvc.FromBody] CustomerCreate body)
        {
            return _implementation.V1PUT4Async(id, body);
        }

        /// <summary>Gets all existing Customer.</summary>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Customer/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> V1All4([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1All4Async(extend, filter);
        }

        /// <summary>Creates a new Customer.</summary>
        /// <param name="body">The CustomerCreate to create a new Customer from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Customer/v1")]
        public System.Threading.Tasks.Task<Customer> V1POST4([Microsoft.AspNetCore.Mvc.FromBody] CustomerCreate body)
        {
            return _implementation.V1POST4Async(body);
        }

        /// <summary>Deletes an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE5(int id)
        {
            return _implementation.V1DELETE5Async(id);
        }

        /// <summary>Gets an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id to get HourRegistration for.</param>
        /// <param name="extend">A list of keys on which to extend the HourRegistration, e.g. Article,Customer, Carriers.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1/{id}")]
        public System.Threading.Tasks.Task<HourRegistration> V1GET4(int id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GET4Async(id, extend);
        }

        /// <summary>Patches an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to patch.</param>
        /// <param name="body">The operations to perform onHourRegistrationCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH5(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCH5Async(id, body);
        }

        /// <summary>Replaces an existing HourRegistration given the specified Id.</summary>
        /// <param name="id">The Id of the HourRegistration to replace.</param>
        /// <param name="body">The HourRegistrationCreate to create a new HourRegistration from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT5(int id, [Microsoft.AspNetCore.Mvc.FromBody] HourRegistrationCreate body)
        {
            return _implementation.V1PUT5Async(id, body);
        }

        /// <summary>Gets all existing HourRegistration.</summary>
        /// <param name="extend">A list of keys on which to extend the HourRegistration, e.g. Article, Customer.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HourRegistration>> V1All5([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1All5Async(extend, filter);
        }

        /// <summary>Creates a new HourRegistration.</summary>
        /// <param name="body">The HourRegistrationCreate to create a new HourRegistration from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("HourRegistration/v1")]
        public System.Threading.Tasks.Task<HourRegistration> V1POST5([Microsoft.AspNetCore.Mvc.FromBody] HourRegistrationCreate body)
        {
            return _implementation.V1POST5Async(body);
        }

        /// <summary>Gets an existing HourRegistrationDocument given the specified Id.</summary>
        /// <param name="id">The Id to get HourRegistrationDocument for.</param>
        /// <param name="extend">A list of keys on which to extend the Customer, e.g. Orders (not implemented).</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("HourRegistrationDocument/v1/{id}")]
        public System.Threading.Tasks.Task<HourRegistrationDocument> V1GET5(System.Guid id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GET5Async(id, extend);
        }

        /// <summary>Creates a new HourRegistrationDocument.</summary>
        /// <param name="body">The HourRegistrationDocumentCreate to create a new HourRegistrationDocument from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("HourRegistrationDocument/v1")]
        public System.Threading.Tasks.Task<string> V1POST6([Microsoft.AspNetCore.Mvc.FromBody] HourRegistrationDocumentCreate body)
        {
            return _implementation.V1POST6Async(body);
        }

        /// <summary>Deletes an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to delete.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("Project/v1/{id}")]
        public System.Threading.Tasks.Task V1DELETE6(int id)
        {
            return _implementation.V1DELETE6Async(id);
        }

        /// <summary>Gets an existing Project given the specified Id.</summary>
        /// <param name="id">The Id to get Project for.</param>
        /// <param name="extend">A list of keys on which to extend the Project.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Project/v1/{id}")]
        public System.Threading.Tasks.Task<Project> V1GET6(int id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend)
        {
            return _implementation.V1GET6Async(id, extend);
        }

        /// <summary>Patches an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to patch.</param>
        /// <param name="body">The operations to perform onProjectCreate.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("Project/v1/{id}")]
        public System.Threading.Tasks.Task V1PATCH6(int id, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<JsonPatchOperation> body)
        {
            return _implementation.V1PATCH6Async(id, body);
        }

        /// <summary>Replaces an existing Project given the specified Id.</summary>
        /// <param name="id">The Id of the Project to replace.</param>
        /// <param name="body">The ProjectCreate to create a new Project from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("Project/v1/{id}")]
        public System.Threading.Tasks.Task V1PUT6(int id, [Microsoft.AspNetCore.Mvc.FromBody] ProjectCreate body)
        {
            return _implementation.V1PUT6Async(id, body);
        }

        /// <summary>Gets all existing Project.</summary>
        /// <param name="extend">A list of keys on which to extend the Project.</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("Project/v1")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> V1All6([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> extend, [Microsoft.AspNetCore.Mvc.FromQuery] object filter)
        {
            return _implementation.V1All6Async(extend, filter);
        }

        /// <summary>Creates a new Project.</summary>
        /// <param name="body">The ProjectCreate to create a new Project from.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("Project/v1")]
        public System.Threading.Tasks.Task<Project> V1POST7([Microsoft.AspNetCore.Mvc.FromBody] ProjectCreate body)
        {
            return _implementation.V1POST7Async(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Article
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("articleNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArticleNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("articleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArticleType ArticleType { get; set; }

        [Newtonsoft.Json.JsonProperty("salesPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SalesPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvoiceStatus InvoiceStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArticleMetadata Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("hourRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HourRegistration> HourRegistrations { get; set; }

        /// <summary>false if soft deleted</summary>
        [Newtonsoft.Json.JsonProperty("show", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Show { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ArticleCreate
    {
        [Newtonsoft.Json.JsonProperty("articleNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ArticleNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("articleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArticleType ArticleType { get; set; }

        [Newtonsoft.Json.JsonProperty("salesPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SalesPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArticleMetadata Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ArticleMetadata
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }

        [Newtonsoft.Json.JsonProperty("netWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("grossWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("netVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("grossVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArticleId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ArticleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"amount")]
        Amount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hour")]
        Hour = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AttestationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"noAttestation")]
        NoAttestation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"toAttest")]
        ToAttest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"attested")]
        Attested = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Carrier
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierTypeId", Required = Newtonsoft.Json.Required.Always)]
        public int CarrierTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CarrierType CarrierType { get; set; }

        [Newtonsoft.Json.JsonProperty("employee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Employee Employee { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Department Department { get; set; }

        [Newtonsoft.Json.JsonProperty("wageType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WageType WageType { get; set; }

        [Newtonsoft.Json.JsonProperty("hourRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HourRegistrationCarrier> HourRegistrations { get; set; }

        /// <summary>false if soft deleted</summary>
        [Newtonsoft.Json.JsonProperty("show", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Show { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CarrierCreate
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierTypeId", Required = Newtonsoft.Json.Required.Always)]
        public int CarrierTypeId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CarrierType
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierTypeKind", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierTypeKind CarrierTypeKind { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInAccounting", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInAccounting { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInHour", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInHour { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInInvoice", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInInvoice { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInLedger", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInLedger { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInSalary", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInSalary { get; set; }

        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Carrier> Carriers { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CarrierTypeCreate
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInAccounting", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInAccounting { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInHour", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInHour { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInInvoice", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInInvoice { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInLedger", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInLedger { get; set; }

        [Newtonsoft.Json.JsonProperty("usedInSalary", Required = Newtonsoft.Json.Required.Always)]
        public bool UsedInSalary { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CarrierTypeKind
    {
        [System.Runtime.Serialization.EnumMember(Value = @"free")]
        Free = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"department")]
        Department = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"task")]
        Task = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"activity")]
        Activity = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"year")]
        Year = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"product")]
        Product = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"trade")]
        Trade = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"asset")]
        Asset = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"costType")]
        CostType = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"workType")]
        WorkType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"contract")]
        Contract = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"realEstate")]
        RealEstate = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"person")]
        Person = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"issuer")]
        Issuer = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"product2")]
        Product2 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"detail")]
        Detail = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"quality")]
        Quality = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"additionalTrait")]
        AdditionalTrait = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"organic")]
        Organic = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"forestInfo")]
        ForestInfo = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"wagetype")]
        Wagetype = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"workplaceLocation")]
        WorkplaceLocation = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Contact
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1 { get; set; }

        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2 { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ContactPerson
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("phone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone1 { get; set; }

        [Newtonsoft.Json.JsonProperty("phone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone2 { get; set; }

        [Newtonsoft.Json.JsonProperty("mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mobile { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Customer
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Used for duplicate check</summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("vatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("bankAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("hourAttestationMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HourAttestationMobile { get; set; }

        /// <summary>false if soft deleted</summary>
        [Newtonsoft.Json.JsonProperty("show", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Show { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StreetAddress Address { get; set; } = new StreetAddress();

        [Newtonsoft.Json.JsonProperty("contactInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Contact ContactInfo { get; set; } = new Contact();

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; }

        [Newtonsoft.Json.JsonProperty("hourRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HourRegistration> HourRegistrations { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CustomerCreate
    {
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("vatNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VatNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("bankAccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccountNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("hourAttestationMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HourAttestationMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StreetAddress Address { get; set; } = new StreetAddress();

        [Newtonsoft.Json.JsonProperty("contactInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Contact ContactInfo { get; set; } = new Contact();

        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactPerson ContactPerson { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Department
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("organizationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("cadastralNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CadastralNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Employee
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("phonePrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhonePrivate { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneMobile { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistration
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Your reference</summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>The reference to the master hourRegistration in a group</summary>
        [Newtonsoft.Json.JsonProperty("masterRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MasterRefId { get; set; }

        [Newtonsoft.Json.JsonProperty("hourDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset HourDate { get; set; }

        [Newtonsoft.Json.JsonProperty("hourCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HourCount { get; set; }

        [Newtonsoft.Json.JsonProperty("hourPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HourPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("hoursInvoiced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HoursInvoiced { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("attestationStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AttestationStatus AttestationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvoiceStatus InvoiceStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("salaryStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalaryStatus SalaryStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        [Newtonsoft.Json.JsonProperty("article", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Article Article { get; set; }

        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HourRegistrationCarrier> Carriers { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("documentationIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DocumentationIds { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistrationCarrier
    {
        [Newtonsoft.Json.JsonProperty("hourRegistrationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HourRegistrationId { get; set; }

        [Newtonsoft.Json.JsonProperty("hourRegistration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HourRegistration HourRegistration { get; set; }

        [Newtonsoft.Json.JsonProperty("carrierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CarrierId { get; set; }

        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Carrier Carrier { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistrationCarrierCreate
    {
        [Newtonsoft.Json.JsonProperty("carrierId", Required = Newtonsoft.Json.Required.Always)]
        public int CarrierId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistrationCreate
    {
        /// <summary>Use this as your reference</summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        /// <summary>The reference to the master hourRegistration in a group</summary>
        [Newtonsoft.Json.JsonProperty("masterRefId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MasterRefId { get; set; }

        [Newtonsoft.Json.JsonProperty("hourDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset HourDate { get; set; }

        [Newtonsoft.Json.JsonProperty("hourCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HourCount { get; set; }

        [Newtonsoft.Json.JsonProperty("hourPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HourPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("hoursInvoiced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HoursInvoiced { get; set; }

        [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("articleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArticleId { get; set; }

        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HourRegistrationCarrierCreate> Carriers { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistrationDocument
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("documentReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentReference { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("fileData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] FileData { get; set; }

        [Newtonsoft.Json.JsonProperty("fileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourRegistrationDocumentCreate
    {
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("fileData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] FileData { get; set; }

        [Newtonsoft.Json.JsonProperty("hourRegistrationId", Required = Newtonsoft.Json.Required.Always)]
        public int HourRegistrationId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InvoiceStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"toBeInvoiced")]
        ToBeInvoiced = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"noInvoice")]
        NoInvoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 3,

    }

    /// <summary>Array of operations to perform</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class JsonPatchDocument : System.Collections.ObjectModel.Collection<JsonPatchOperation>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class JsonPatchOperation
    {
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonPatchOperationType? Op { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        /// <summary>Only used in move</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object From { get; set; }

        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum JsonPatchOperationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"replace")]
        Replace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"move")]
        Move = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"copy")]
        Copy = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Project
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Carrier Carrier { get; set; } = new Carrier();

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActualEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("contractSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ContractSum { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Customer Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("projectLeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Carrier ProjectLeader { get; set; }

        [Newtonsoft.Json.JsonProperty("rowversion", Required = Newtonsoft.Json.Required.Always)]
        public long Rowversion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProjectCarrierCreate
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength = 1)]
        public string Key { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProjectCreate
    {
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDate { get; set; }

        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("actualEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActualEndDate { get; set; }

        [Newtonsoft.Json.JsonProperty("contractSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ContractSum { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectLeaderCarrierId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProjectLeaderCarrierId { get; set; }

        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCarrierCreate Carrier { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SalaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StreetAddress
    {
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }

        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }

        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address3 { get; set; }

        [Newtonsoft.Json.JsonProperty("isForeign", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsForeign { get; set; }

        [Newtonsoft.Json.JsonProperty("zipCodeKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCodeKey { get; set; }

        [Newtonsoft.Json.JsonProperty("zipCodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WageType
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }


    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016