/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICarrierTypeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all existing CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>List&lt;CarrierType&gt;</returns>
        List<CarrierType> CarrierTypeV1Get (List<string> extend = null, Object filter = null);

        /// <summary>
        /// Gets all existing CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>ApiResponse of List&lt;CarrierType&gt;</returns>
        ApiResponse<List<CarrierType>> CarrierTypeV1GetWithHttpInfo (List<string> extend = null, Object filter = null);
        /// <summary>
        /// Deletes an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns></returns>
        void CarrierTypeV1IdDelete (int? id);

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CarrierTypeV1IdDeleteWithHttpInfo (int? id);
        /// <summary>
        /// Gets an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>CarrierType</returns>
        CarrierType CarrierTypeV1IdGet (int? id, List<string> extend = null);

        /// <summary>
        /// Gets an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>ApiResponse of CarrierType</returns>
        ApiResponse<CarrierType> CarrierTypeV1IdGetWithHttpInfo (int? id, List<string> extend = null);
        /// <summary>
        /// Patches an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns></returns>
        void CarrierTypeV1IdPatch (int? id, List<JsonPatchOperation> body = null);

        /// <summary>
        /// Patches an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CarrierTypeV1IdPatchWithHttpInfo (int? id, List<JsonPatchOperation> body = null);
        /// <summary>
        /// Replaces an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns></returns>
        void CarrierTypeV1IdPut (int? id, CarrierTypeCreate body = null);

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CarrierTypeV1IdPutWithHttpInfo (int? id, CarrierTypeCreate body = null);
        /// <summary>
        /// Creates a new CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>CarrierType</returns>
        CarrierType CarrierTypeV1Post (CarrierTypeCreate body = null);

        /// <summary>
        /// Creates a new CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>ApiResponse of CarrierType</returns>
        ApiResponse<CarrierType> CarrierTypeV1PostWithHttpInfo (CarrierTypeCreate body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all existing CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>Task of List&lt;CarrierType&gt;</returns>
        System.Threading.Tasks.Task<List<CarrierType>> CarrierTypeV1GetAsync (List<string> extend = null, Object filter = null);

        /// <summary>
        /// Gets all existing CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CarrierType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CarrierType>>> CarrierTypeV1GetAsyncWithHttpInfo (List<string> extend = null, Object filter = null);
        /// <summary>
        /// Deletes an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CarrierTypeV1IdDeleteAsync (int? id);

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Gets an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>Task of CarrierType</returns>
        System.Threading.Tasks.Task<CarrierType> CarrierTypeV1IdGetAsync (int? id, List<string> extend = null);

        /// <summary>
        /// Gets an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarrierType>> CarrierTypeV1IdGetAsyncWithHttpInfo (int? id, List<string> extend = null);
        /// <summary>
        /// Patches an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CarrierTypeV1IdPatchAsync (int? id, List<JsonPatchOperation> body = null);

        /// <summary>
        /// Patches an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdPatchAsyncWithHttpInfo (int? id, List<JsonPatchOperation> body = null);
        /// <summary>
        /// Replaces an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CarrierTypeV1IdPutAsync (int? id, CarrierTypeCreate body = null);

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdPutAsyncWithHttpInfo (int? id, CarrierTypeCreate body = null);
        /// <summary>
        /// Creates a new CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>Task of CarrierType</returns>
        System.Threading.Tasks.Task<CarrierType> CarrierTypeV1PostAsync (CarrierTypeCreate body = null);

        /// <summary>
        /// Creates a new CarrierType.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierType)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarrierType>> CarrierTypeV1PostAsyncWithHttpInfo (CarrierTypeCreate body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CarrierTypeApi : ICarrierTypeApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CarrierTypeApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierTypeApi"/> class
        /// </summary>
        /// <returns></returns>
        public CarrierTypeApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CarrierTypeApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all existing CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>List&lt;CarrierType&gt;</returns>
        public List<CarrierType> CarrierTypeV1Get (List<string> extend = null, Object filter = null)
        {
             ApiResponse<List<CarrierType>> localVarResponse = CarrierTypeV1GetWithHttpInfo(extend, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all existing CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>ApiResponse of List&lt;CarrierType&gt;</returns>
        public ApiResponse< List<CarrierType> > CarrierTypeV1GetWithHttpInfo (List<string> extend = null, Object filter = null)
        {

            var localVarPath = "/CarrierType/v1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extend", extend)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CarrierType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CarrierType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CarrierType>)));
        }

        /// <summary>
        /// Gets all existing CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>Task of List&lt;CarrierType&gt;</returns>
        public async System.Threading.Tasks.Task<List<CarrierType>> CarrierTypeV1GetAsync (List<string> extend = null, Object filter = null)
        {
             ApiResponse<List<CarrierType>> localVarResponse = await CarrierTypeV1GetAsyncWithHttpInfo(extend, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all existing CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <param name="filter">Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CarrierType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CarrierType>>> CarrierTypeV1GetAsyncWithHttpInfo (List<string> extend = null, Object filter = null)
        {

            var localVarPath = "/CarrierType/v1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extend", extend)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CarrierType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CarrierType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CarrierType>)));
        }

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns></returns>
        public void CarrierTypeV1IdDelete (int? id)
        {
             CarrierTypeV1IdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CarrierTypeV1IdDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdDelete");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CarrierTypeV1IdDeleteAsync (int? id)
        {
             await CarrierTypeV1IdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdDelete");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>CarrierType</returns>
        public CarrierType CarrierTypeV1IdGet (int? id, List<string> extend = null)
        {
             ApiResponse<CarrierType> localVarResponse = CarrierTypeV1IdGetWithHttpInfo(id, extend);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>ApiResponse of CarrierType</returns>
        public ApiResponse< CarrierType > CarrierTypeV1IdGetWithHttpInfo (int? id, List<string> extend = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdGet");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (extend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extend", extend)); // query parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierType)));
        }

        /// <summary>
        /// Gets an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>Task of CarrierType</returns>
        public async System.Threading.Tasks.Task<CarrierType> CarrierTypeV1IdGetAsync (int? id, List<string> extend = null)
        {
             ApiResponse<CarrierType> localVarResponse = await CarrierTypeV1IdGetAsyncWithHttpInfo(id, extend);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id to get CarrierType for.</param>
        /// <param name="extend">A list of keys on which to extend the CarrierType, e.g. Carriers. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CarrierType>> CarrierTypeV1IdGetAsyncWithHttpInfo (int? id, List<string> extend = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdGet");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (extend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extend", extend)); // query parameter
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierType)));
        }

        /// <summary>
        /// Patches an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns></returns>
        public void CarrierTypeV1IdPatch (int? id, List<JsonPatchOperation> body = null)
        {
             CarrierTypeV1IdPatchWithHttpInfo(id, body);
        }

        /// <summary>
        /// Patches an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CarrierTypeV1IdPatchWithHttpInfo (int? id, List<JsonPatchOperation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdPatch");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Patches an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CarrierTypeV1IdPatchAsync (int? id, List<JsonPatchOperation> body = null)
        {
             await CarrierTypeV1IdPatchAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Patches an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to patch.</param>
        /// <param name="body">The operations to perform on CarrierTypeCreate. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdPatchAsyncWithHttpInfo (int? id, List<JsonPatchOperation> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdPatch");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns></returns>
        public void CarrierTypeV1IdPut (int? id, CarrierTypeCreate body = null)
        {
             CarrierTypeV1IdPutWithHttpInfo(id, body);
        }

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CarrierTypeV1IdPutWithHttpInfo (int? id, CarrierTypeCreate body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdPut");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CarrierTypeV1IdPutAsync (int? id, CarrierTypeCreate body = null)
        {
             await CarrierTypeV1IdPutAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Replaces an existing CarrierType given the specified Id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the CarrierType to replace.</param>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType from. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CarrierTypeV1IdPutAsyncWithHttpInfo (int? id, CarrierTypeCreate body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CarrierTypeApi->CarrierTypeV1IdPut");

            var localVarPath = "/CarrierType/v1/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1IdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates a new CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>CarrierType</returns>
        public CarrierType CarrierTypeV1Post (CarrierTypeCreate body = null)
        {
             ApiResponse<CarrierType> localVarResponse = CarrierTypeV1PostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>ApiResponse of CarrierType</returns>
        public ApiResponse< CarrierType > CarrierTypeV1PostWithHttpInfo (CarrierTypeCreate body = null)
        {

            var localVarPath = "/CarrierType/v1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierType)));
        }

        /// <summary>
        /// Creates a new CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>Task of CarrierType</returns>
        public async System.Threading.Tasks.Task<CarrierType> CarrierTypeV1PostAsync (CarrierTypeCreate body = null)
        {
             ApiResponse<CarrierType> localVarResponse = await CarrierTypeV1PostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new CarrierType. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The CarrierTypeCreate to create a new CarrierType of the type CT_Free from. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CarrierType>> CarrierTypeV1PostAsyncWithHttpInfo (CarrierTypeCreate body = null)
        {

            var localVarPath = "/CarrierType/v1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyClientAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key")))
            {
                localVarHeaderParams["X-Api-Client-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Client-Key");
            }
            // authentication (ApiKeyIntegrationAuthentication) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key")))
            {
                localVarHeaderParams["X-Api-Integration-Key"] = this.Configuration.GetApiKeyWithPrefix("X-Api-Integration-Key");
            }
            // authentication (UserAuthentication) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CarrierTypeV1Post", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierType)));
        }

    }
}
