/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ArticleMetadata
    /// </summary>
    [DataContract]
        public partial class ArticleMetadata :  IEquatable<ArticleMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleMetadata" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="ean">ean.</param>
        /// <param name="netWeight">netWeight.</param>
        /// <param name="grossWeight">grossWeight.</param>
        /// <param name="netVolume">netVolume.</param>
        /// <param name="grossVolume">grossVolume.</param>
        public ArticleMetadata(string description = default(string), string ean = default(string), double? netWeight = default(double?), double? grossWeight = default(double?), double? netVolume = default(double?), double? grossVolume = default(double?))
        {
            this.Description = description;
            this.Ean = ean;
            this.NetWeight = netWeight;
            this.GrossWeight = grossWeight;
            this.NetVolume = netVolume;
            this.GrossVolume = grossVolume;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Ean
        /// </summary>
        [DataMember(Name="ean", EmitDefaultValue=false)]
        public string Ean { get; set; }

        /// <summary>
        /// Gets or Sets NetWeight
        /// </summary>
        [DataMember(Name="netWeight", EmitDefaultValue=false)]
        public double? NetWeight { get; set; }

        /// <summary>
        /// Gets or Sets GrossWeight
        /// </summary>
        [DataMember(Name="grossWeight", EmitDefaultValue=false)]
        public double? GrossWeight { get; set; }

        /// <summary>
        /// Gets or Sets NetVolume
        /// </summary>
        [DataMember(Name="netVolume", EmitDefaultValue=false)]
        public double? NetVolume { get; set; }

        /// <summary>
        /// Gets or Sets GrossVolume
        /// </summary>
        [DataMember(Name="grossVolume", EmitDefaultValue=false)]
        public double? GrossVolume { get; set; }

        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [DataMember(Name="articleId", EmitDefaultValue=false)]
        public int? ArticleId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleMetadata {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Ean: ").Append(Ean).Append("\n");
            sb.Append("  NetWeight: ").Append(NetWeight).Append("\n");
            sb.Append("  GrossWeight: ").Append(GrossWeight).Append("\n");
            sb.Append("  NetVolume: ").Append(NetVolume).Append("\n");
            sb.Append("  GrossVolume: ").Append(GrossVolume).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArticleMetadata);
        }

        /// <summary>
        /// Returns true if ArticleMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ArticleMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Ean == input.Ean ||
                    (this.Ean != null &&
                    this.Ean.Equals(input.Ean))
                ) && 
                (
                    this.NetWeight == input.NetWeight ||
                    (this.NetWeight != null &&
                    this.NetWeight.Equals(input.NetWeight))
                ) && 
                (
                    this.GrossWeight == input.GrossWeight ||
                    (this.GrossWeight != null &&
                    this.GrossWeight.Equals(input.GrossWeight))
                ) && 
                (
                    this.NetVolume == input.NetVolume ||
                    (this.NetVolume != null &&
                    this.NetVolume.Equals(input.NetVolume))
                ) && 
                (
                    this.GrossVolume == input.GrossVolume ||
                    (this.GrossVolume != null &&
                    this.GrossVolume.Equals(input.GrossVolume))
                ) && 
                (
                    this.ArticleId == input.ArticleId ||
                    (this.ArticleId != null &&
                    this.ArticleId.Equals(input.ArticleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Ean != null)
                    hashCode = hashCode * 59 + this.Ean.GetHashCode();
                if (this.NetWeight != null)
                    hashCode = hashCode * 59 + this.NetWeight.GetHashCode();
                if (this.GrossWeight != null)
                    hashCode = hashCode * 59 + this.GrossWeight.GetHashCode();
                if (this.NetVolume != null)
                    hashCode = hashCode * 59 + this.NetVolume.GetHashCode();
                if (this.GrossVolume != null)
                    hashCode = hashCode * 59 + this.GrossVolume.GetHashCode();
                if (this.ArticleId != null)
                    hashCode = hashCode * 59 + this.ArticleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
