/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CarrierTypeCreate
    /// </summary>
    [DataContract]
        public partial class CarrierTypeCreate :  IEquatable<CarrierTypeCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierTypeCreate" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="usedInAccounting">usedInAccounting (required).</param>
        /// <param name="usedInHour">usedInHour (required).</param>
        /// <param name="usedInInvoice">usedInInvoice (required).</param>
        /// <param name="usedInLedger">usedInLedger (required).</param>
        /// <param name="usedInSalary">usedInSalary (required).</param>
        public CarrierTypeCreate(string name = default(string), bool? usedInAccounting = default(bool?), bool? usedInHour = default(bool?), bool? usedInInvoice = default(bool?), bool? usedInLedger = default(bool?), bool? usedInSalary = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "usedInAccounting" is required (not null)
            if (usedInAccounting == null)
            {
                throw new InvalidDataException("usedInAccounting is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.UsedInAccounting = usedInAccounting;
            }
            // to ensure "usedInHour" is required (not null)
            if (usedInHour == null)
            {
                throw new InvalidDataException("usedInHour is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.UsedInHour = usedInHour;
            }
            // to ensure "usedInInvoice" is required (not null)
            if (usedInInvoice == null)
            {
                throw new InvalidDataException("usedInInvoice is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.UsedInInvoice = usedInInvoice;
            }
            // to ensure "usedInLedger" is required (not null)
            if (usedInLedger == null)
            {
                throw new InvalidDataException("usedInLedger is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.UsedInLedger = usedInLedger;
            }
            // to ensure "usedInSalary" is required (not null)
            if (usedInSalary == null)
            {
                throw new InvalidDataException("usedInSalary is a required property for CarrierTypeCreate and cannot be null");
            }
            else
            {
                this.UsedInSalary = usedInSalary;
            }
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UsedInAccounting
        /// </summary>
        [DataMember(Name="usedInAccounting", EmitDefaultValue=false)]
        public bool? UsedInAccounting { get; set; }

        /// <summary>
        /// Gets or Sets UsedInHour
        /// </summary>
        [DataMember(Name="usedInHour", EmitDefaultValue=false)]
        public bool? UsedInHour { get; set; }

        /// <summary>
        /// Gets or Sets UsedInInvoice
        /// </summary>
        [DataMember(Name="usedInInvoice", EmitDefaultValue=false)]
        public bool? UsedInInvoice { get; set; }

        /// <summary>
        /// Gets or Sets UsedInLedger
        /// </summary>
        [DataMember(Name="usedInLedger", EmitDefaultValue=false)]
        public bool? UsedInLedger { get; set; }

        /// <summary>
        /// Gets or Sets UsedInSalary
        /// </summary>
        [DataMember(Name="usedInSalary", EmitDefaultValue=false)]
        public bool? UsedInSalary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarrierTypeCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UsedInAccounting: ").Append(UsedInAccounting).Append("\n");
            sb.Append("  UsedInHour: ").Append(UsedInHour).Append("\n");
            sb.Append("  UsedInInvoice: ").Append(UsedInInvoice).Append("\n");
            sb.Append("  UsedInLedger: ").Append(UsedInLedger).Append("\n");
            sb.Append("  UsedInSalary: ").Append(UsedInSalary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarrierTypeCreate);
        }

        /// <summary>
        /// Returns true if CarrierTypeCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of CarrierTypeCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarrierTypeCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UsedInAccounting == input.UsedInAccounting ||
                    (this.UsedInAccounting != null &&
                    this.UsedInAccounting.Equals(input.UsedInAccounting))
                ) && 
                (
                    this.UsedInHour == input.UsedInHour ||
                    (this.UsedInHour != null &&
                    this.UsedInHour.Equals(input.UsedInHour))
                ) && 
                (
                    this.UsedInInvoice == input.UsedInInvoice ||
                    (this.UsedInInvoice != null &&
                    this.UsedInInvoice.Equals(input.UsedInInvoice))
                ) && 
                (
                    this.UsedInLedger == input.UsedInLedger ||
                    (this.UsedInLedger != null &&
                    this.UsedInLedger.Equals(input.UsedInLedger))
                ) && 
                (
                    this.UsedInSalary == input.UsedInSalary ||
                    (this.UsedInSalary != null &&
                    this.UsedInSalary.Equals(input.UsedInSalary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UsedInAccounting != null)
                    hashCode = hashCode * 59 + this.UsedInAccounting.GetHashCode();
                if (this.UsedInHour != null)
                    hashCode = hashCode * 59 + this.UsedInHour.GetHashCode();
                if (this.UsedInInvoice != null)
                    hashCode = hashCode * 59 + this.UsedInInvoice.GetHashCode();
                if (this.UsedInLedger != null)
                    hashCode = hashCode * 59 + this.UsedInLedger.GetHashCode();
                if (this.UsedInSalary != null)
                    hashCode = hashCode * 59 + this.UsedInSalary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
