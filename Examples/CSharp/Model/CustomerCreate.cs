/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerCreate
    /// </summary>
    [DataContract]
        public partial class CustomerCreate :  IEquatable<CustomerCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCreate" /> class.
        /// </summary>
        /// <param name="externalId">externalId (required).</param>
        /// <param name="vatNumber">vatNumber.</param>
        /// <param name="bankAccountNumber">bankAccountNumber.</param>
        /// <param name="invoiceEmail">invoiceEmail.</param>
        /// <param name="hourAttestationMobile">hourAttestationMobile.</param>
        /// <param name="address">address (required).</param>
        /// <param name="contactInfo">contactInfo (required).</param>
        /// <param name="contactPerson">contactPerson.</param>
        public CustomerCreate(string externalId = default(string), string vatNumber = default(string), string bankAccountNumber = default(string), string invoiceEmail = default(string), string hourAttestationMobile = default(string), StreetAddress address = default(StreetAddress), Contact contactInfo = default(Contact), ContactPerson contactPerson = default(ContactPerson))
        {
            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new InvalidDataException("externalId is a required property for CustomerCreate and cannot be null");
            }
            else
            {
                this.ExternalId = externalId;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for CustomerCreate and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "contactInfo" is required (not null)
            if (contactInfo == null)
            {
                throw new InvalidDataException("contactInfo is a required property for CustomerCreate and cannot be null");
            }
            else
            {
                this.ContactInfo = contactInfo;
            }
            this.VatNumber = vatNumber;
            this.BankAccountNumber = bankAccountNumber;
            this.InvoiceEmail = invoiceEmail;
            this.HourAttestationMobile = hourAttestationMobile;
            this.ContactPerson = contactPerson;
        }
        
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name="vatNumber", EmitDefaultValue=false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankAccountNumber
        /// </summary>
        [DataMember(Name="bankAccountNumber", EmitDefaultValue=false)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceEmail
        /// </summary>
        [DataMember(Name="invoiceEmail", EmitDefaultValue=false)]
        public string InvoiceEmail { get; set; }

        /// <summary>
        /// Gets or Sets HourAttestationMobile
        /// </summary>
        [DataMember(Name="hourAttestationMobile", EmitDefaultValue=false)]
        public string HourAttestationMobile { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public StreetAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets ContactInfo
        /// </summary>
        [DataMember(Name="contactInfo", EmitDefaultValue=false)]
        public Contact ContactInfo { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name="contactPerson", EmitDefaultValue=false)]
        public ContactPerson ContactPerson { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCreate {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  InvoiceEmail: ").Append(InvoiceEmail).Append("\n");
            sb.Append("  HourAttestationMobile: ").Append(HourAttestationMobile).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactInfo: ").Append(ContactInfo).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerCreate);
        }

        /// <summary>
        /// Returns true if CustomerCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.InvoiceEmail == input.InvoiceEmail ||
                    (this.InvoiceEmail != null &&
                    this.InvoiceEmail.Equals(input.InvoiceEmail))
                ) && 
                (
                    this.HourAttestationMobile == input.HourAttestationMobile ||
                    (this.HourAttestationMobile != null &&
                    this.HourAttestationMobile.Equals(input.HourAttestationMobile))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ContactInfo == input.ContactInfo ||
                    (this.ContactInfo != null &&
                    this.ContactInfo.Equals(input.ContactInfo))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.VatNumber != null)
                    hashCode = hashCode * 59 + this.VatNumber.GetHashCode();
                if (this.BankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankAccountNumber.GetHashCode();
                if (this.InvoiceEmail != null)
                    hashCode = hashCode * 59 + this.InvoiceEmail.GetHashCode();
                if (this.HourAttestationMobile != null)
                    hashCode = hashCode * 59 + this.HourAttestationMobile.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ContactInfo != null)
                    hashCode = hashCode * 59 + this.ContactInfo.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
