/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HourRegistrationCreate
    /// </summary>
    [DataContract]
        public partial class HourRegistrationCreate :  IEquatable<HourRegistrationCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HourRegistrationCreate" /> class.
        /// </summary>
        /// <param name="externalId">Use this as your reference.</param>
        /// <param name="masterRefId">The reference to the master hourRegistration in a group.</param>
        /// <param name="hourDate">hourDate (required).</param>
        /// <param name="hourCount">hourCount.</param>
        /// <param name="hourPrice">hourPrice.</param>
        /// <param name="hoursInvoiced">hoursInvoiced.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="description">description.</param>
        /// <param name="articleId">articleId.</param>
        /// <param name="carriers">carriers.</param>
        /// <param name="customerId">customerId.</param>
        public HourRegistrationCreate(string externalId = default(string), int? masterRefId = default(int?), DateTime? hourDate = default(DateTime?), double? hourCount = default(double?), double? hourPrice = default(double?), double? hoursInvoiced = default(double?), double? totalPrice = default(double?), string description = default(string), int? articleId = default(int?), List<HourRegistrationCarrierCreate> carriers = default(List<HourRegistrationCarrierCreate>), int? customerId = default(int?))
        {
            // to ensure "hourDate" is required (not null)
            if (hourDate == null)
            {
                throw new InvalidDataException("hourDate is a required property for HourRegistrationCreate and cannot be null");
            }
            else
            {
                this.HourDate = hourDate;
            }
            this.ExternalId = externalId;
            this.MasterRefId = masterRefId;
            this.HourCount = hourCount;
            this.HourPrice = hourPrice;
            this.HoursInvoiced = hoursInvoiced;
            this.TotalPrice = totalPrice;
            this.Description = description;
            this.ArticleId = articleId;
            this.Carriers = carriers;
            this.CustomerId = customerId;
        }
        
        /// <summary>
        /// Use this as your reference
        /// </summary>
        /// <value>Use this as your reference</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The reference to the master hourRegistration in a group
        /// </summary>
        /// <value>The reference to the master hourRegistration in a group</value>
        [DataMember(Name="masterRefId", EmitDefaultValue=false)]
        public int? MasterRefId { get; set; }

        /// <summary>
        /// Gets or Sets HourDate
        /// </summary>
        [DataMember(Name="hourDate", EmitDefaultValue=false)]
        public DateTime? HourDate { get; set; }

        /// <summary>
        /// Gets or Sets HourCount
        /// </summary>
        [DataMember(Name="hourCount", EmitDefaultValue=false)]
        public double? HourCount { get; set; }

        /// <summary>
        /// Gets or Sets HourPrice
        /// </summary>
        [DataMember(Name="hourPrice", EmitDefaultValue=false)]
        public double? HourPrice { get; set; }

        /// <summary>
        /// Gets or Sets HoursInvoiced
        /// </summary>
        [DataMember(Name="hoursInvoiced", EmitDefaultValue=false)]
        public double? HoursInvoiced { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        [DataMember(Name="totalPrice", EmitDefaultValue=false)]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        [DataMember(Name="articleId", EmitDefaultValue=false)]
        public int? ArticleId { get; set; }

        /// <summary>
        /// Gets or Sets Carriers
        /// </summary>
        [DataMember(Name="carriers", EmitDefaultValue=false)]
        public List<HourRegistrationCarrierCreate> Carriers { get; set; }

        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HourRegistrationCreate {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  MasterRefId: ").Append(MasterRefId).Append("\n");
            sb.Append("  HourDate: ").Append(HourDate).Append("\n");
            sb.Append("  HourCount: ").Append(HourCount).Append("\n");
            sb.Append("  HourPrice: ").Append(HourPrice).Append("\n");
            sb.Append("  HoursInvoiced: ").Append(HoursInvoiced).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Carriers: ").Append(Carriers).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HourRegistrationCreate);
        }

        /// <summary>
        /// Returns true if HourRegistrationCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of HourRegistrationCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HourRegistrationCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.MasterRefId == input.MasterRefId ||
                    (this.MasterRefId != null &&
                    this.MasterRefId.Equals(input.MasterRefId))
                ) && 
                (
                    this.HourDate == input.HourDate ||
                    (this.HourDate != null &&
                    this.HourDate.Equals(input.HourDate))
                ) && 
                (
                    this.HourCount == input.HourCount ||
                    (this.HourCount != null &&
                    this.HourCount.Equals(input.HourCount))
                ) && 
                (
                    this.HourPrice == input.HourPrice ||
                    (this.HourPrice != null &&
                    this.HourPrice.Equals(input.HourPrice))
                ) && 
                (
                    this.HoursInvoiced == input.HoursInvoiced ||
                    (this.HoursInvoiced != null &&
                    this.HoursInvoiced.Equals(input.HoursInvoiced))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ArticleId == input.ArticleId ||
                    (this.ArticleId != null &&
                    this.ArticleId.Equals(input.ArticleId))
                ) && 
                (
                    this.Carriers == input.Carriers ||
                    this.Carriers != null &&
                    input.Carriers != null &&
                    this.Carriers.SequenceEqual(input.Carriers)
                ) && 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.MasterRefId != null)
                    hashCode = hashCode * 59 + this.MasterRefId.GetHashCode();
                if (this.HourDate != null)
                    hashCode = hashCode * 59 + this.HourDate.GetHashCode();
                if (this.HourCount != null)
                    hashCode = hashCode * 59 + this.HourCount.GetHashCode();
                if (this.HourPrice != null)
                    hashCode = hashCode * 59 + this.HourPrice.GetHashCode();
                if (this.HoursInvoiced != null)
                    hashCode = hashCode * 59 + this.HoursInvoiced.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ArticleId != null)
                    hashCode = hashCode * 59 + this.ArticleId.GetHashCode();
                if (this.Carriers != null)
                    hashCode = hashCode * 59 + this.Carriers.GetHashCode();
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
