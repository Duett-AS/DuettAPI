/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines JsonPatchOperationType
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
        public enum JsonPatchOperationType
    {
        /// <summary>
        /// Enum Add for value: add
        /// </summary>
        [EnumMember(Value = "add")]
        Add = 1,
        /// <summary>
        /// Enum Remove for value: remove
        /// </summary>
        [EnumMember(Value = "remove")]
        Remove = 2,
        /// <summary>
        /// Enum Replace for value: replace
        /// </summary>
        [EnumMember(Value = "replace")]
        Replace = 3,
        /// <summary>
        /// Enum Move for value: move
        /// </summary>
        [EnumMember(Value = "move")]
        Move = 4,
        /// <summary>
        /// Enum Copy for value: copy
        /// </summary>
        [EnumMember(Value = "copy")]
        Copy = 5,
        /// <summary>
        /// Enum Test for value: test
        /// </summary>
        [EnumMember(Value = "test")]
        Test = 6    }
}
