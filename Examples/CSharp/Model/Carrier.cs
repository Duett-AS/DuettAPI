/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Carrier
    /// </summary>
    [DataContract]
        public partial class Carrier :  IEquatable<Carrier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Carrier" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="key">key.</param>
        /// <param name="carrierType">carrierType.</param>
        /// <param name="employee">employee.</param>
        /// <param name="project">project.</param>
        /// <param name="department">department.</param>
        /// <param name="wageType">wageType.</param>
        public Carrier(string name = default(string), string key = default(string), CarrierType carrierType = default(CarrierType), Employee employee = default(Employee), Project project = default(Project), Department department = default(Department), WageType wageType = default(WageType))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Carrier and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Key = key;
            this.CarrierType = carrierType;
            this.Employee = employee;
            this.Project = project;
            this.Department = department;
            this.WageType = wageType;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets CarrierTypeId
        /// </summary>
        [DataMember(Name="carrierTypeId", EmitDefaultValue=false)]
        public int? CarrierTypeId { get; private set; }

        /// <summary>
        /// Gets or Sets CarrierType
        /// </summary>
        [DataMember(Name="carrierType", EmitDefaultValue=false)]
        public CarrierType CarrierType { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="employee", EmitDefaultValue=false)]
        public Employee Employee { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public Project Project { get; set; }

        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public Department Department { get; set; }

        /// <summary>
        /// Gets or Sets WageType
        /// </summary>
        [DataMember(Name="wageType", EmitDefaultValue=false)]
        public WageType WageType { get; set; }

        /// <summary>
        /// Gets or Sets HourRegistrations
        /// </summary>
        [DataMember(Name="hourRegistrations", EmitDefaultValue=false)]
        public List<HourRegistrationCarrier> HourRegistrations { get; private set; }

        /// <summary>
        /// false if soft deleted
        /// </summary>
        /// <value>false if soft deleted</value>
        [DataMember(Name="show", EmitDefaultValue=false)]
        public bool? Show { get; private set; }

        /// <summary>
        /// Gets or Sets Rowversion
        /// </summary>
        [DataMember(Name="rowversion", EmitDefaultValue=false)]
        public long? Rowversion { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Carrier {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  CarrierTypeId: ").Append(CarrierTypeId).Append("\n");
            sb.Append("  CarrierType: ").Append(CarrierType).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  WageType: ").Append(WageType).Append("\n");
            sb.Append("  HourRegistrations: ").Append(HourRegistrations).Append("\n");
            sb.Append("  Show: ").Append(Show).Append("\n");
            sb.Append("  Rowversion: ").Append(Rowversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Carrier);
        }

        /// <summary>
        /// Returns true if Carrier instances are equal
        /// </summary>
        /// <param name="input">Instance of Carrier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Carrier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.CarrierTypeId == input.CarrierTypeId ||
                    (this.CarrierTypeId != null &&
                    this.CarrierTypeId.Equals(input.CarrierTypeId))
                ) && 
                (
                    this.CarrierType == input.CarrierType ||
                    (this.CarrierType != null &&
                    this.CarrierType.Equals(input.CarrierType))
                ) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.WageType == input.WageType ||
                    (this.WageType != null &&
                    this.WageType.Equals(input.WageType))
                ) && 
                (
                    this.HourRegistrations == input.HourRegistrations ||
                    this.HourRegistrations != null &&
                    input.HourRegistrations != null &&
                    this.HourRegistrations.SequenceEqual(input.HourRegistrations)
                ) && 
                (
                    this.Show == input.Show ||
                    (this.Show != null &&
                    this.Show.Equals(input.Show))
                ) && 
                (
                    this.Rowversion == input.Rowversion ||
                    (this.Rowversion != null &&
                    this.Rowversion.Equals(input.Rowversion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.CarrierTypeId != null)
                    hashCode = hashCode * 59 + this.CarrierTypeId.GetHashCode();
                if (this.CarrierType != null)
                    hashCode = hashCode * 59 + this.CarrierType.GetHashCode();
                if (this.Employee != null)
                    hashCode = hashCode * 59 + this.Employee.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.WageType != null)
                    hashCode = hashCode * 59 + this.WageType.GetHashCode();
                if (this.HourRegistrations != null)
                    hashCode = hashCode * 59 + this.HourRegistrations.GetHashCode();
                if (this.Show != null)
                    hashCode = hashCode * 59 + this.Show.GetHashCode();
                if (this.Rowversion != null)
                    hashCode = hashCode * 59 + this.Rowversion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
