/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StreetAddress
    /// </summary>
    [DataContract]
        public partial class StreetAddress :  IEquatable<StreetAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAddress" /> class.
        /// </summary>
        /// <param name="address1">address1 (required).</param>
        /// <param name="address2">address2.</param>
        /// <param name="address3">address3.</param>
        /// <param name="zipCodeKey">zipCodeKey.</param>
        /// <param name="country">country.</param>
        public StreetAddress(string address1 = default(string), string address2 = default(string), string address3 = default(string), string zipCodeKey = default(string), string country = default(string))
        {
            // to ensure "address1" is required (not null)
            if (address1 == null)
            {
                throw new InvalidDataException("address1 is a required property for StreetAddress and cannot be null");
            }
            else
            {
                this.Address1 = address1;
            }
            this.Address2 = address2;
            this.Address3 = address3;
            this.ZipCodeKey = zipCodeKey;
            this.Country = country;
        }
        
        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets Address3
        /// </summary>
        [DataMember(Name="address3", EmitDefaultValue=false)]
        public string Address3 { get; set; }

        /// <summary>
        /// Gets or Sets IsForeign
        /// </summary>
        [DataMember(Name="isForeign", EmitDefaultValue=false)]
        public bool? IsForeign { get; private set; }

        /// <summary>
        /// Gets or Sets ZipCodeKey
        /// </summary>
        [DataMember(Name="zipCodeKey", EmitDefaultValue=false)]
        public string ZipCodeKey { get; set; }

        /// <summary>
        /// Gets or Sets ZipCodeName
        /// </summary>
        [DataMember(Name="zipCodeName", EmitDefaultValue=false)]
        public string ZipCodeName { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreetAddress {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  IsForeign: ").Append(IsForeign).Append("\n");
            sb.Append("  ZipCodeKey: ").Append(ZipCodeKey).Append("\n");
            sb.Append("  ZipCodeName: ").Append(ZipCodeName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StreetAddress);
        }

        /// <summary>
        /// Returns true if StreetAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of StreetAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreetAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.Address3 == input.Address3 ||
                    (this.Address3 != null &&
                    this.Address3.Equals(input.Address3))
                ) && 
                (
                    this.IsForeign == input.IsForeign ||
                    (this.IsForeign != null &&
                    this.IsForeign.Equals(input.IsForeign))
                ) && 
                (
                    this.ZipCodeKey == input.ZipCodeKey ||
                    (this.ZipCodeKey != null &&
                    this.ZipCodeKey.Equals(input.ZipCodeKey))
                ) && 
                (
                    this.ZipCodeName == input.ZipCodeName ||
                    (this.ZipCodeName != null &&
                    this.ZipCodeName.Equals(input.ZipCodeName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.Address3 != null)
                    hashCode = hashCode * 59 + this.Address3.GetHashCode();
                if (this.IsForeign != null)
                    hashCode = hashCode * 59 + this.IsForeign.GetHashCode();
                if (this.ZipCodeKey != null)
                    hashCode = hashCode * 59 + this.ZipCodeKey.GetHashCode();
                if (this.ZipCodeName != null)
                    hashCode = hashCode * 59 + this.ZipCodeName.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
