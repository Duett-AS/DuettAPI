/* 
 * OpenApi
 *
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Article
    /// </summary>
    [DataContract]
        public partial class Article :  IEquatable<Article>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Article" /> class.
        /// </summary>
        /// <param name="articleNumber">articleNumber (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="articleType">articleType (required).</param>
        /// <param name="salesPrice">salesPrice.</param>
        /// <param name="invoiceStatus">invoiceStatus.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="unit">unit.</param>
        public Article(string articleNumber = default(string), string name = default(string), ArticleType articleType = default(ArticleType), double? salesPrice = default(double?), InvoiceStatus invoiceStatus = default(InvoiceStatus), ArticleMetadata metadata = default(ArticleMetadata), string unit = default(string))
        {
            // to ensure "articleNumber" is required (not null)
            if (articleNumber == null)
            {
                throw new InvalidDataException("articleNumber is a required property for Article and cannot be null");
            }
            else
            {
                this.ArticleNumber = articleNumber;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Article and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "articleType" is required (not null)
            if (articleType == null)
            {
                throw new InvalidDataException("articleType is a required property for Article and cannot be null");
            }
            else
            {
                this.ArticleType = articleType;
            }
            this.SalesPrice = salesPrice;
            this.InvoiceStatus = invoiceStatus;
            this.Metadata = metadata;
            this.Unit = unit;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets ArticleNumber
        /// </summary>
        [DataMember(Name="articleNumber", EmitDefaultValue=false)]
        public string ArticleNumber { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ArticleType
        /// </summary>
        [DataMember(Name="articleType", EmitDefaultValue=false)]
        public ArticleType ArticleType { get; set; }

        /// <summary>
        /// Gets or Sets SalesPrice
        /// </summary>
        [DataMember(Name="salesPrice", EmitDefaultValue=false)]
        public double? SalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceStatus
        /// </summary>
        [DataMember(Name="invoiceStatus", EmitDefaultValue=false)]
        public InvoiceStatus InvoiceStatus { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public ArticleMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets HourRegistrations
        /// </summary>
        [DataMember(Name="hourRegistrations", EmitDefaultValue=false)]
        public List<HourRegistration> HourRegistrations { get; private set; }

        /// <summary>
        /// false if soft deleted
        /// </summary>
        /// <value>false if soft deleted</value>
        [DataMember(Name="show", EmitDefaultValue=false)]
        public bool? Show { get; private set; }

        /// <summary>
        /// Gets or Sets Rowversion
        /// </summary>
        [DataMember(Name="rowversion", EmitDefaultValue=false)]
        public long? Rowversion { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ArticleNumber: ").Append(ArticleNumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArticleType: ").Append(ArticleType).Append("\n");
            sb.Append("  SalesPrice: ").Append(SalesPrice).Append("\n");
            sb.Append("  InvoiceStatus: ").Append(InvoiceStatus).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  HourRegistrations: ").Append(HourRegistrations).Append("\n");
            sb.Append("  Show: ").Append(Show).Append("\n");
            sb.Append("  Rowversion: ").Append(Rowversion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Article);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="input">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ArticleNumber == input.ArticleNumber ||
                    (this.ArticleNumber != null &&
                    this.ArticleNumber.Equals(input.ArticleNumber))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ArticleType == input.ArticleType ||
                    (this.ArticleType != null &&
                    this.ArticleType.Equals(input.ArticleType))
                ) && 
                (
                    this.SalesPrice == input.SalesPrice ||
                    (this.SalesPrice != null &&
                    this.SalesPrice.Equals(input.SalesPrice))
                ) && 
                (
                    this.InvoiceStatus == input.InvoiceStatus ||
                    (this.InvoiceStatus != null &&
                    this.InvoiceStatus.Equals(input.InvoiceStatus))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.HourRegistrations == input.HourRegistrations ||
                    this.HourRegistrations != null &&
                    input.HourRegistrations != null &&
                    this.HourRegistrations.SequenceEqual(input.HourRegistrations)
                ) && 
                (
                    this.Show == input.Show ||
                    (this.Show != null &&
                    this.Show.Equals(input.Show))
                ) && 
                (
                    this.Rowversion == input.Rowversion ||
                    (this.Rowversion != null &&
                    this.Rowversion.Equals(input.Rowversion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ArticleNumber != null)
                    hashCode = hashCode * 59 + this.ArticleNumber.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ArticleType != null)
                    hashCode = hashCode * 59 + this.ArticleType.GetHashCode();
                if (this.SalesPrice != null)
                    hashCode = hashCode * 59 + this.SalesPrice.GetHashCode();
                if (this.InvoiceStatus != null)
                    hashCode = hashCode * 59 + this.InvoiceStatus.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.HourRegistrations != null)
                    hashCode = hashCode * 59 + this.HourRegistrations.GetHashCode();
                if (this.Show != null)
                    hashCode = hashCode * 59 + this.Show.GetHashCode();
                if (this.Rowversion != null)
                    hashCode = hashCode * 59 + this.Rowversion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
