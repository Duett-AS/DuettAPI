/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Duett;
(function (Duett) {
    var API;
    (function (API) {
        var Client = /** @class */ (function () {
            function Client(baseUrl, http) {
                this.jsonParseReviver = undefined;
                this.http = http ? http : window;
                this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
            }
            /**
             * Deletes an existing Article given the specified Id.
             * @param id The Id of the Article to delete.
             * @return Success
             */
            Client.prototype.v1DELETE = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/Article/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE(_response);
                });
            };
            Client.prototype.processV1DELETE = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing Article given the specified Id.
             * @param id The Id of the Article to patch.
             * @param body (optional) The operations to perform on ArticleCreate.
             * @return Success
             */
            Client.prototype.v1PATCH = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Article/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH(_response);
                });
            };
            Client.prototype.processV1PATCH = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing Article given the specified Id.
             * @param id The Id of the Article to replace.
             * @param body (optional) The ArticleCreate to replace the old Article from.
             * @return Success
             */
            Client.prototype.v1PUT = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Article/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT(_response);
                });
            };
            Client.prototype.processV1PUT = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing Article.
             * @param extend (optional) A list of keys on which to extend the Article, e.g. HourRegistrations, Metadata.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/Article/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All(_response);
                });
            };
            Client.prototype.processV1All = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                                var item = resultData200_1[_i];
                                result200.push(Article.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new Article.
             * @param body (optional) The ArticleCreate to create a new Article from.
             * @return Success
             */
            Client.prototype.v1POST = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/Article/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST(_response);
                });
            };
            Client.prototype.processV1POST = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = Article.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Deletes an existing Carrier given the specified Id.
             * @param id The Id of the Carrier to delete.
             * @return Success
             */
            Client.prototype.v1DELETE2 = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE2(_response);
                });
            };
            Client.prototype.processV1DELETE2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing Carrier given the specified Id.
             * @param id The Id to get Carrier for.
             * @param extend (optional) A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.
             * @return Success
             */
            Client.prototype.v1GET = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET(_response);
                });
            };
            Client.prototype.processV1GET = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = Carrier.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing Carrier given the specified Id.
             * @param id The Id of the Carrier to patch.
             * @param body (optional) The operations to perform on  CarrierCreate.
             * @return Success
             */
            Client.prototype.v1PATCH2 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH2(_response);
                });
            };
            Client.prototype.processV1PATCH2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing Carrier given the specified Id.
             * @param id The Id of the Carrier to replace.
             * @param body (optional) The CarrierCreate to create a new Carrier from.
             * @return Success
             */
            Client.prototype.v1PUT2 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT2(_response);
                });
            };
            Client.prototype.processV1PUT2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing Carrier.
             * @param extend (optional) A list of keys on which to extend the Carrier, e.g. HourRegistrations, CarrierType.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All2 = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All2(_response);
                });
            };
            Client.prototype.processV1All2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                                var item = resultData200_2[_i];
                                result200.push(Carrier.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new Carrier.
             * @param body (optional) The CarrierCreate to create a new Carrier from.
             * @return Success
             */
            Client.prototype.v1POST2 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/Carrier/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST2(_response);
                });
            };
            Client.prototype.processV1POST2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = Carrier.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Deletes an existing CarrierType given the specified Id.
             * @param id The Id of the CarrierType to delete.
             * @return Success
             */
            Client.prototype.v1DELETE3 = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE3(_response);
                });
            };
            Client.prototype.processV1DELETE3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing CarrierType given the specified Id.
             * @param id The Id to get CarrierType for.
             * @param extend (optional) A list of keys on which to extend the CarrierType, e.g. Carriers.
             * @return Success
             */
            Client.prototype.v1GET2 = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET2(_response);
                });
            };
            Client.prototype.processV1GET2 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = CarrierType.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing CarrierType given the specified Id.
             * @param id The Id of the CarrierType to patch.
             * @param body (optional) The operations to perform on CarrierTypeCreate.
             * @return Success
             */
            Client.prototype.v1PATCH3 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH3(_response);
                });
            };
            Client.prototype.processV1PATCH3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing CarrierType given the specified Id.
             * @param id The Id of the CarrierType to replace.
             * @param body (optional) The CarrierTypeCreate to create a new CarrierType from.
             * @return Success
             */
            Client.prototype.v1PUT3 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT3(_response);
                });
            };
            Client.prototype.processV1PUT3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing CarrierType.
             * @param extend (optional) A list of keys on which to extend the CarrierType, e.g. Carriers.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All3 = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All3(_response);
                });
            };
            Client.prototype.processV1All3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                                var item = resultData200_3[_i];
                                result200.push(CarrierType.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new CarrierType.
             * @param body (optional) The CarrierTypeCreate to create a new CarrierType of the type CT_Free from.
             * @return Success
             */
            Client.prototype.v1POST3 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/CarrierType/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST3(_response);
                });
            };
            Client.prototype.processV1POST3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = CarrierType.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Deletes an existing Customer given the specified Id.
             * @param id The Id of the Customer to delete.
             * @return Success
             */
            Client.prototype.v1DELETE4 = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE4(_response);
                });
            };
            Client.prototype.processV1DELETE4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing Customer given the specified Id.
             * @param id The Id to get Customer for.
             * @param extend (optional) A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.
             * @return Success
             */
            Client.prototype.v1GET3 = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET3(_response);
                });
            };
            Client.prototype.processV1GET3 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = Customer.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing Customer given the specified Id.
             * @param id The Id of the Customer to patch.
             * @param body (optional) The operations to perform on CustomerCreate.
             * @return Success
             */
            Client.prototype.v1PATCH4 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH4(_response);
                });
            };
            Client.prototype.processV1PATCH4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing Customer given the specified Id.
             * @param id The Id of the Customer to replace.
             * @param body (optional) The CustomerCreate to create a new Customer from.
             * @return Success
             */
            Client.prototype.v1PUT4 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT4(_response);
                });
            };
            Client.prototype.processV1PUT4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing Customer.
             * @param extend (optional) A list of keys on which to extend the Customer, e.g. Address, ContactInfo, ContactPerson, HourRegistrations.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All4 = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All4(_response);
                });
            };
            Client.prototype.processV1All4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                                var item = resultData200_4[_i];
                                result200.push(Customer.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new Customer.
             * @param body (optional) The CustomerCreate to create a new Customer from.
             * @return Success
             */
            Client.prototype.v1POST4 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/Customer/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST4(_response);
                });
            };
            Client.prototype.processV1POST4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = Customer.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Deletes an existing HourRegistration given the specified Id.
             * @param id The Id of the HourRegistration to delete.
             * @return Success
             */
            Client.prototype.v1DELETE5 = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE5(_response);
                });
            };
            Client.prototype.processV1DELETE5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing HourRegistration given the specified Id.
             * @param id The Id to get HourRegistration for.
             * @param extend (optional) A list of keys on which to extend the HourRegistration, e.g. Article,Customer, Carriers.
             * @return Success
             */
            Client.prototype.v1GET4 = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET4(_response);
                });
            };
            Client.prototype.processV1GET4 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = HourRegistration.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing HourRegistration given the specified Id.
             * @param id The Id of the HourRegistration to patch.
             * @param body (optional) The operations to perform onHourRegistrationCreate.
             * @return Success
             */
            Client.prototype.v1PATCH5 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH5(_response);
                });
            };
            Client.prototype.processV1PATCH5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing HourRegistration given the specified Id.
             * @param id The Id of the HourRegistration to replace.
             * @param body (optional) The HourRegistrationCreate to create a new HourRegistration from.
             * @return Success
             */
            Client.prototype.v1PUT5 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT5(_response);
                });
            };
            Client.prototype.processV1PUT5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing HourRegistration.
             * @param extend (optional) A list of keys on which to extend the HourRegistration, e.g. Article, Customer.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All5 = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All5(_response);
                });
            };
            Client.prototype.processV1All5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                                var item = resultData200_5[_i];
                                result200.push(HourRegistration.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new HourRegistration.
             * @param body (optional) The HourRegistrationCreate to create a new HourRegistration from.
             * @return Success
             */
            Client.prototype.v1POST5 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistration/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST5(_response);
                });
            };
            Client.prototype.processV1POST5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = HourRegistration.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing HourRegistrationDocument given the specified Id.
             * @param id The Id to get HourRegistrationDocument for.
             * @param extend (optional) A list of keys on which to extend the Customer, e.g. Orders (not implemented).
             * @return Success
             */
            Client.prototype.v1GET5 = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistrationDocument/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET5(_response);
                });
            };
            Client.prototype.processV1GET5 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = HourRegistrationDocument.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new HourRegistrationDocument.
             * @param body (optional) The HourRegistrationDocumentCreate to create a new HourRegistrationDocument from.
             * @return Success
             */
            Client.prototype.v1POST6 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/HourRegistrationDocument/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST6(_response);
                });
            };
            Client.prototype.processV1POST6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = resultData201 !== undefined ? resultData201 : null;
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Deletes an existing Project given the specified Id.
             * @param id The Id of the Project to delete.
             * @return Success
             */
            Client.prototype.v1DELETE6 = function (id) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "DELETE",
                    headers: {}
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1DELETE6(_response);
                });
            };
            Client.prototype.processV1DELETE6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets an existing Project given the specified Id.
             * @param id The Id to get Project for.
             * @param extend (optional) A list of keys on which to extend the Project.
             * @return Success
             */
            Client.prototype.v1GET6 = function (id, extend) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1/{id}?";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1GET6(_response);
                });
            };
            Client.prototype.processV1GET6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result200 = Project.fromJS(resultData200);
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Patches an existing Project given the specified Id.
             * @param id The Id of the Project to patch.
             * @param body (optional) The operations to perform onProjectCreate.
             * @return Success
             */
            Client.prototype.v1PATCH6 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PATCH6(_response);
                });
            };
            Client.prototype.processV1PATCH6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Replaces an existing Project given the specified Id.
             * @param id The Id of the Project to replace.
             * @param body (optional) The ProjectCreate to create a new Project from.
             * @return Success
             */
            Client.prototype.v1PUT6 = function (id, body) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1/{id}";
                if (id === undefined || id === null)
                    throw new Error("The parameter 'id' must be defined.");
                url_ = url_.replace("{id}", encodeURIComponent("" + id));
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1PUT6(_response);
                });
            };
            Client.prototype.processV1PUT6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 204) {
                    return response.text().then(function (_responseText) {
                        return;
                    });
                }
                else if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Gets all existing Project.
             * @param extend (optional) A list of keys on which to extend the Project.
             * @param filter (optional) Query object used for filtering the result list. Supported operators are [EQ], [NEQ], [GT], [GTE], [LT], [LTE], [IN], [NIN], [LIKE], [BETWEEN] for value properties.
             * @return Success
             */
            Client.prototype.v1All6 = function (extend, filter) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1?";
                if (extend === null)
                    throw new Error("The parameter 'extend' cannot be null.");
                else if (extend !== undefined)
                    extend && extend.forEach(function (item) { url_ += "extend=" + encodeURIComponent("" + item) + "&"; });
                if (filter === null)
                    throw new Error("The parameter 'filter' cannot be null.");
                else if (filter !== undefined)
                    url_ += "filter=" + encodeURIComponent("" + filter) + "&";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    method: "GET",
                    headers: {
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1All6(_response);
                });
            };
            Client.prototype.processV1All6 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 404) {
                    return response.text().then(function (_responseText) {
                        var result404 = null;
                        var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result404 = ProblemDetails.fromJS(resultData404);
                        return throwException("Not Found", status, _responseText, _headers, result404);
                    });
                }
                else if (status === 200) {
                    return response.text().then(function (_responseText) {
                        var result200 = null;
                        var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        if (Array.isArray(resultData200)) {
                            result200 = [];
                            for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                                var item = resultData200_6[_i];
                                result200.push(Project.fromJS(item));
                            }
                        }
                        else {
                            result200 = null;
                        }
                        return result200;
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            /**
             * Creates a new Project.
             * @param body (optional) The ProjectCreate to create a new Project from.
             * @return Success
             */
            Client.prototype.v1POST7 = function (body) {
                var _this = this;
                var url_ = this.baseUrl + "/Project/v1";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(body);
                var options_ = {
                    body: content_,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json-patch+json",
                        "Accept": "text/plain"
                    }
                };
                return this.http.fetch(url_, options_).then(function (_response) {
                    return _this.processV1POST7(_response);
                });
            };
            Client.prototype.processV1POST7 = function (response) {
                var _this = this;
                var status = response.status;
                var _headers = {};
                if (response.headers && response.headers.forEach) {
                    response.headers.forEach(function (v, k) { return _headers[k] = v; });
                }
                ;
                if (status === 201) {
                    return response.text().then(function (_responseText) {
                        var result201 = null;
                        var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result201 = Project.fromJS(resultData201);
                        return result201;
                    });
                }
                else if (status === 400) {
                    return response.text().then(function (_responseText) {
                        var result400 = null;
                        var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        result400 = ProblemDetails.fromJS(resultData400);
                        return throwException("Bad Request", status, _responseText, _headers, result400);
                    });
                }
                else {
                    return response.text().then(function (_responseText) {
                        var resultdefault = null;
                        var resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                        resultdefault = ProblemDetails.fromJS(resultDatadefault);
                        return throwException("Error", status, _responseText, _headers, resultdefault);
                    });
                }
            };
            return Client;
        }());
        API.Client = Client;
        var Article = /** @class */ (function () {
            function Article(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Article.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.articleNumber = _data["articleNumber"];
                    this.name = _data["name"];
                    this.articleType = _data["articleType"];
                    this.salesPrice = _data["salesPrice"];
                    this.invoiceStatus = _data["invoiceStatus"];
                    this.metadata = _data["metadata"] ? ArticleMetadata.fromJS(_data["metadata"]) : undefined;
                    this.unit = _data["unit"];
                    if (Array.isArray(_data["hourRegistrations"])) {
                        this.hourRegistrations = [];
                        for (var _i = 0, _a = _data["hourRegistrations"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.hourRegistrations.push(HourRegistration.fromJS(item));
                        }
                    }
                    this.show = _data["show"];
                    this.rowversion = _data["rowversion"];
                }
            };
            Article.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Article();
                result.init(data);
                return result;
            };
            Article.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["articleNumber"] = this.articleNumber;
                data["name"] = this.name;
                data["articleType"] = this.articleType;
                data["salesPrice"] = this.salesPrice;
                data["invoiceStatus"] = this.invoiceStatus;
                data["metadata"] = this.metadata ? this.metadata.toJSON() : undefined;
                data["unit"] = this.unit;
                if (Array.isArray(this.hourRegistrations)) {
                    data["hourRegistrations"] = [];
                    for (var _i = 0, _a = this.hourRegistrations; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["hourRegistrations"].push(item.toJSON());
                    }
                }
                data["show"] = this.show;
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Article;
        }());
        API.Article = Article;
        var ArticleCreate = /** @class */ (function () {
            function ArticleCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ArticleCreate.prototype.init = function (_data) {
                if (_data) {
                    this.articleNumber = _data["articleNumber"];
                    this.name = _data["name"];
                    this.articleType = _data["articleType"];
                    this.salesPrice = _data["salesPrice"];
                    this.metadata = _data["metadata"] ? ArticleMetadata.fromJS(_data["metadata"]) : undefined;
                    this.unit = _data["unit"];
                }
            };
            ArticleCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ArticleCreate();
                result.init(data);
                return result;
            };
            ArticleCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["articleNumber"] = this.articleNumber;
                data["name"] = this.name;
                data["articleType"] = this.articleType;
                data["salesPrice"] = this.salesPrice;
                data["metadata"] = this.metadata ? this.metadata.toJSON() : undefined;
                data["unit"] = this.unit;
                return data;
            };
            return ArticleCreate;
        }());
        API.ArticleCreate = ArticleCreate;
        var ArticleMetadata = /** @class */ (function () {
            function ArticleMetadata(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ArticleMetadata.prototype.init = function (_data) {
                if (_data) {
                    this.description = _data["description"];
                    this.ean = _data["ean"];
                    this.netWeight = _data["netWeight"];
                    this.grossWeight = _data["grossWeight"];
                    this.netVolume = _data["netVolume"];
                    this.grossVolume = _data["grossVolume"];
                    this.articleId = _data["articleId"];
                }
            };
            ArticleMetadata.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ArticleMetadata();
                result.init(data);
                return result;
            };
            ArticleMetadata.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["description"] = this.description;
                data["ean"] = this.ean;
                data["netWeight"] = this.netWeight;
                data["grossWeight"] = this.grossWeight;
                data["netVolume"] = this.netVolume;
                data["grossVolume"] = this.grossVolume;
                data["articleId"] = this.articleId;
                return data;
            };
            return ArticleMetadata;
        }());
        API.ArticleMetadata = ArticleMetadata;
        var ArticleType;
        (function (ArticleType) {
            ArticleType["Normal"] = "normal";
            ArticleType["Amount"] = "amount";
            ArticleType["Hour"] = "hour";
        })(ArticleType = API.ArticleType || (API.ArticleType = {}));
        var AttestationStatus;
        (function (AttestationStatus) {
            AttestationStatus["NoAttestation"] = "noAttestation";
            AttestationStatus["ToAttest"] = "toAttest";
            AttestationStatus["Attested"] = "attested";
            AttestationStatus["Rejected"] = "rejected";
        })(AttestationStatus = API.AttestationStatus || (API.AttestationStatus = {}));
        var Carrier = /** @class */ (function () {
            function Carrier(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Carrier.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.name = _data["name"];
                    this.key = _data["key"];
                    this.carrierTypeId = _data["carrierTypeId"];
                    this.carrierType = _data["carrierType"] ? CarrierType.fromJS(_data["carrierType"]) : undefined;
                    this.employee = _data["employee"] ? Employee.fromJS(_data["employee"]) : undefined;
                    this.project = _data["project"] ? Project.fromJS(_data["project"]) : undefined;
                    this.department = _data["department"] ? Department.fromJS(_data["department"]) : undefined;
                    this.wageType = _data["wageType"] ? WageType.fromJS(_data["wageType"]) : undefined;
                    if (Array.isArray(_data["hourRegistrations"])) {
                        this.hourRegistrations = [];
                        for (var _i = 0, _a = _data["hourRegistrations"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.hourRegistrations.push(HourRegistrationCarrier.fromJS(item));
                        }
                    }
                    this.show = _data["show"];
                    this.rowversion = _data["rowversion"];
                }
            };
            Carrier.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Carrier();
                result.init(data);
                return result;
            };
            Carrier.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["name"] = this.name;
                data["key"] = this.key;
                data["carrierTypeId"] = this.carrierTypeId;
                data["carrierType"] = this.carrierType ? this.carrierType.toJSON() : undefined;
                data["employee"] = this.employee ? this.employee.toJSON() : undefined;
                data["project"] = this.project ? this.project.toJSON() : undefined;
                data["department"] = this.department ? this.department.toJSON() : undefined;
                data["wageType"] = this.wageType ? this.wageType.toJSON() : undefined;
                if (Array.isArray(this.hourRegistrations)) {
                    data["hourRegistrations"] = [];
                    for (var _i = 0, _a = this.hourRegistrations; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["hourRegistrations"].push(item.toJSON());
                    }
                }
                data["show"] = this.show;
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Carrier;
        }());
        API.Carrier = Carrier;
        var CarrierCreate = /** @class */ (function () {
            function CarrierCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            CarrierCreate.prototype.init = function (_data) {
                if (_data) {
                    this.name = _data["name"];
                    this.key = _data["key"];
                    this.carrierTypeId = _data["carrierTypeId"];
                }
            };
            CarrierCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new CarrierCreate();
                result.init(data);
                return result;
            };
            CarrierCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name;
                data["key"] = this.key;
                data["carrierTypeId"] = this.carrierTypeId;
                return data;
            };
            return CarrierCreate;
        }());
        API.CarrierCreate = CarrierCreate;
        var CarrierType = /** @class */ (function () {
            function CarrierType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            CarrierType.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.carrierTypeKind = _data["carrierTypeKind"];
                    this.name = _data["name"];
                    this.usedInAccounting = _data["usedInAccounting"];
                    this.usedInHour = _data["usedInHour"];
                    this.usedInInvoice = _data["usedInInvoice"];
                    this.usedInLedger = _data["usedInLedger"];
                    this.usedInSalary = _data["usedInSalary"];
                    if (Array.isArray(_data["carriers"])) {
                        this.carriers = [];
                        for (var _i = 0, _a = _data["carriers"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.carriers.push(Carrier.fromJS(item));
                        }
                    }
                    this.rowversion = _data["rowversion"];
                }
            };
            CarrierType.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new CarrierType();
                result.init(data);
                return result;
            };
            CarrierType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["carrierTypeKind"] = this.carrierTypeKind;
                data["name"] = this.name;
                data["usedInAccounting"] = this.usedInAccounting;
                data["usedInHour"] = this.usedInHour;
                data["usedInInvoice"] = this.usedInInvoice;
                data["usedInLedger"] = this.usedInLedger;
                data["usedInSalary"] = this.usedInSalary;
                if (Array.isArray(this.carriers)) {
                    data["carriers"] = [];
                    for (var _i = 0, _a = this.carriers; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["carriers"].push(item.toJSON());
                    }
                }
                data["rowversion"] = this.rowversion;
                return data;
            };
            return CarrierType;
        }());
        API.CarrierType = CarrierType;
        var CarrierTypeCreate = /** @class */ (function () {
            function CarrierTypeCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            CarrierTypeCreate.prototype.init = function (_data) {
                if (_data) {
                    this.name = _data["name"];
                    this.usedInAccounting = _data["usedInAccounting"];
                    this.usedInHour = _data["usedInHour"];
                    this.usedInInvoice = _data["usedInInvoice"];
                    this.usedInLedger = _data["usedInLedger"];
                    this.usedInSalary = _data["usedInSalary"];
                }
            };
            CarrierTypeCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new CarrierTypeCreate();
                result.init(data);
                return result;
            };
            CarrierTypeCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name;
                data["usedInAccounting"] = this.usedInAccounting;
                data["usedInHour"] = this.usedInHour;
                data["usedInInvoice"] = this.usedInInvoice;
                data["usedInLedger"] = this.usedInLedger;
                data["usedInSalary"] = this.usedInSalary;
                return data;
            };
            return CarrierTypeCreate;
        }());
        API.CarrierTypeCreate = CarrierTypeCreate;
        var CarrierTypeKind;
        (function (CarrierTypeKind) {
            CarrierTypeKind["Free"] = "free";
            CarrierTypeKind["Project"] = "project";
            CarrierTypeKind["Production"] = "production";
            CarrierTypeKind["Employee"] = "employee";
            CarrierTypeKind["Department"] = "department";
            CarrierTypeKind["Task"] = "task";
            CarrierTypeKind["Activity"] = "activity";
            CarrierTypeKind["Year"] = "year";
            CarrierTypeKind["Product"] = "product";
            CarrierTypeKind["Trade"] = "trade";
            CarrierTypeKind["Asset"] = "asset";
            CarrierTypeKind["CostType"] = "costType";
            CarrierTypeKind["WorkType"] = "workType";
            CarrierTypeKind["Contract"] = "contract";
            CarrierTypeKind["RealEstate"] = "realEstate";
            CarrierTypeKind["Person"] = "person";
            CarrierTypeKind["Issuer"] = "issuer";
            CarrierTypeKind["Team"] = "team";
            CarrierTypeKind["Product2"] = "product2";
            CarrierTypeKind["Detail"] = "detail";
            CarrierTypeKind["Quality"] = "quality";
            CarrierTypeKind["AdditionalTrait"] = "additionalTrait";
            CarrierTypeKind["Organic"] = "organic";
            CarrierTypeKind["ForestInfo"] = "forestInfo";
            CarrierTypeKind["Wagetype"] = "wagetype";
            CarrierTypeKind["WorkplaceLocation"] = "workplaceLocation";
        })(CarrierTypeKind = API.CarrierTypeKind || (API.CarrierTypeKind = {}));
        var Contact = /** @class */ (function () {
            function Contact(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Contact.prototype.init = function (_data) {
                if (_data) {
                    this.name = _data["name"];
                    this.phone1 = _data["phone1"];
                    this.phone2 = _data["phone2"];
                    this.mobile = _data["mobile"];
                    this.email = _data["email"];
                }
            };
            Contact.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Contact();
                result.init(data);
                return result;
            };
            Contact.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name;
                data["phone1"] = this.phone1;
                data["phone2"] = this.phone2;
                data["mobile"] = this.mobile;
                data["email"] = this.email;
                return data;
            };
            return Contact;
        }());
        API.Contact = Contact;
        var ContactPerson = /** @class */ (function () {
            function ContactPerson(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ContactPerson.prototype.init = function (_data) {
                if (_data) {
                    this.name = _data["name"];
                    this.phone1 = _data["phone1"];
                    this.phone2 = _data["phone2"];
                    this.mobile = _data["mobile"];
                    this.email = _data["email"];
                }
            };
            ContactPerson.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ContactPerson();
                result.init(data);
                return result;
            };
            ContactPerson.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name;
                data["phone1"] = this.phone1;
                data["phone2"] = this.phone2;
                data["mobile"] = this.mobile;
                data["email"] = this.email;
                return data;
            };
            return ContactPerson;
        }());
        API.ContactPerson = ContactPerson;
        var Customer = /** @class */ (function () {
            function Customer(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
                if (!data) {
                    this.address = new StreetAddress();
                    this.contactInfo = new Contact();
                }
            }
            Customer.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.externalId = _data["externalId"];
                    this.customerNumber = _data["customerNumber"];
                    this.vatNumber = _data["vatNumber"];
                    this.bankAccountNumber = _data["bankAccountNumber"];
                    this.invoiceEmail = _data["invoiceEmail"];
                    this.hourAttestationMobile = _data["hourAttestationMobile"];
                    this.show = _data["show"];
                    this.address = _data["address"] ? StreetAddress.fromJS(_data["address"]) : new StreetAddress();
                    this.contactInfo = _data["contactInfo"] ? Contact.fromJS(_data["contactInfo"]) : new Contact();
                    this.contactPerson = _data["contactPerson"] ? ContactPerson.fromJS(_data["contactPerson"]) : undefined;
                    if (Array.isArray(_data["hourRegistrations"])) {
                        this.hourRegistrations = [];
                        for (var _i = 0, _a = _data["hourRegistrations"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.hourRegistrations.push(HourRegistration.fromJS(item));
                        }
                    }
                    this.rowversion = _data["rowversion"];
                }
            };
            Customer.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Customer();
                result.init(data);
                return result;
            };
            Customer.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["externalId"] = this.externalId;
                data["customerNumber"] = this.customerNumber;
                data["vatNumber"] = this.vatNumber;
                data["bankAccountNumber"] = this.bankAccountNumber;
                data["invoiceEmail"] = this.invoiceEmail;
                data["hourAttestationMobile"] = this.hourAttestationMobile;
                data["show"] = this.show;
                data["address"] = this.address ? this.address.toJSON() : undefined;
                data["contactInfo"] = this.contactInfo ? this.contactInfo.toJSON() : undefined;
                data["contactPerson"] = this.contactPerson ? this.contactPerson.toJSON() : undefined;
                if (Array.isArray(this.hourRegistrations)) {
                    data["hourRegistrations"] = [];
                    for (var _i = 0, _a = this.hourRegistrations; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["hourRegistrations"].push(item.toJSON());
                    }
                }
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Customer;
        }());
        API.Customer = Customer;
        var CustomerCreate = /** @class */ (function () {
            function CustomerCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
                if (!data) {
                    this.address = new StreetAddress();
                    this.contactInfo = new Contact();
                }
            }
            CustomerCreate.prototype.init = function (_data) {
                if (_data) {
                    this.externalId = _data["externalId"];
                    this.vatNumber = _data["vatNumber"];
                    this.bankAccountNumber = _data["bankAccountNumber"];
                    this.invoiceEmail = _data["invoiceEmail"];
                    this.hourAttestationMobile = _data["hourAttestationMobile"];
                    this.address = _data["address"] ? StreetAddress.fromJS(_data["address"]) : new StreetAddress();
                    this.contactInfo = _data["contactInfo"] ? Contact.fromJS(_data["contactInfo"]) : new Contact();
                    this.contactPerson = _data["contactPerson"] ? ContactPerson.fromJS(_data["contactPerson"]) : undefined;
                }
            };
            CustomerCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new CustomerCreate();
                result.init(data);
                return result;
            };
            CustomerCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["externalId"] = this.externalId;
                data["vatNumber"] = this.vatNumber;
                data["bankAccountNumber"] = this.bankAccountNumber;
                data["invoiceEmail"] = this.invoiceEmail;
                data["hourAttestationMobile"] = this.hourAttestationMobile;
                data["address"] = this.address ? this.address.toJSON() : undefined;
                data["contactInfo"] = this.contactInfo ? this.contactInfo.toJSON() : undefined;
                data["contactPerson"] = this.contactPerson ? this.contactPerson.toJSON() : undefined;
                return data;
            };
            return CustomerCreate;
        }());
        API.CustomerCreate = CustomerCreate;
        var Department = /** @class */ (function () {
            function Department(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Department.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.address1 = _data["address1"];
                    this.address2 = _data["address2"];
                    this.organizationNumber = _data["organizationNumber"];
                    this.cadastralNumber = _data["cadastralNumber"];
                    this.rowversion = _data["rowversion"];
                }
            };
            Department.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Department();
                result.init(data);
                return result;
            };
            Department.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["address1"] = this.address1;
                data["address2"] = this.address2;
                data["organizationNumber"] = this.organizationNumber;
                data["cadastralNumber"] = this.cadastralNumber;
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Department;
        }());
        API.Department = Department;
        var Employee = /** @class */ (function () {
            function Employee(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Employee.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.name = _data["name"];
                    this.address1 = _data["address1"];
                    this.address2 = _data["address2"];
                    this.email = _data["email"];
                    this.phonePrivate = _data["phonePrivate"];
                    this.phoneMobile = _data["phoneMobile"];
                    this.rowversion = _data["rowversion"];
                }
            };
            Employee.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Employee();
                result.init(data);
                return result;
            };
            Employee.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["name"] = this.name;
                data["address1"] = this.address1;
                data["address2"] = this.address2;
                data["email"] = this.email;
                data["phonePrivate"] = this.phonePrivate;
                data["phoneMobile"] = this.phoneMobile;
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Employee;
        }());
        API.Employee = Employee;
        var HourRegistration = /** @class */ (function () {
            function HourRegistration(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistration.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.externalId = _data["externalId"];
                    this.masterRefId = _data["masterRefId"];
                    this.hourDate = _data["hourDate"] ? new Date(_data["hourDate"].toString()) : undefined;
                    this.hourCount = _data["hourCount"];
                    this.hourPrice = _data["hourPrice"];
                    this.hoursInvoiced = _data["hoursInvoiced"];
                    this.totalPrice = _data["totalPrice"];
                    this.description = _data["description"];
                    this.attestationStatus = _data["attestationStatus"];
                    this.invoiceStatus = _data["invoiceStatus"];
                    this.salaryStatus = _data["salaryStatus"];
                    this.articleId = _data["articleId"];
                    this.article = _data["article"] ? Article.fromJS(_data["article"]) : undefined;
                    if (Array.isArray(_data["carriers"])) {
                        this.carriers = [];
                        for (var _i = 0, _a = _data["carriers"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.carriers.push(HourRegistrationCarrier.fromJS(item));
                        }
                    }
                    this.customerId = _data["customerId"];
                    this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined;
                    if (Array.isArray(_data["documentationIds"])) {
                        this.documentationIds = [];
                        for (var _b = 0, _c = _data["documentationIds"]; _b < _c.length; _b++) {
                            var item = _c[_b];
                            this.documentationIds.push(item);
                        }
                    }
                    this.rowversion = _data["rowversion"];
                }
            };
            HourRegistration.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistration();
                result.init(data);
                return result;
            };
            HourRegistration.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["externalId"] = this.externalId;
                data["masterRefId"] = this.masterRefId;
                data["hourDate"] = this.hourDate ? this.hourDate.toISOString() : undefined;
                data["hourCount"] = this.hourCount;
                data["hourPrice"] = this.hourPrice;
                data["hoursInvoiced"] = this.hoursInvoiced;
                data["totalPrice"] = this.totalPrice;
                data["description"] = this.description;
                data["attestationStatus"] = this.attestationStatus;
                data["invoiceStatus"] = this.invoiceStatus;
                data["salaryStatus"] = this.salaryStatus;
                data["articleId"] = this.articleId;
                data["article"] = this.article ? this.article.toJSON() : undefined;
                if (Array.isArray(this.carriers)) {
                    data["carriers"] = [];
                    for (var _i = 0, _a = this.carriers; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["carriers"].push(item.toJSON());
                    }
                }
                data["customerId"] = this.customerId;
                data["customer"] = this.customer ? this.customer.toJSON() : undefined;
                if (Array.isArray(this.documentationIds)) {
                    data["documentationIds"] = [];
                    for (var _b = 0, _c = this.documentationIds; _b < _c.length; _b++) {
                        var item = _c[_b];
                        data["documentationIds"].push(item);
                    }
                }
                data["rowversion"] = this.rowversion;
                return data;
            };
            return HourRegistration;
        }());
        API.HourRegistration = HourRegistration;
        var HourRegistrationCarrier = /** @class */ (function () {
            function HourRegistrationCarrier(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistrationCarrier.prototype.init = function (_data) {
                if (_data) {
                    this.hourRegistrationId = _data["hourRegistrationId"];
                    this.hourRegistration = _data["hourRegistration"] ? HourRegistration.fromJS(_data["hourRegistration"]) : undefined;
                    this.carrierId = _data["carrierId"];
                    this.carrier = _data["carrier"] ? Carrier.fromJS(_data["carrier"]) : undefined;
                }
            };
            HourRegistrationCarrier.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistrationCarrier();
                result.init(data);
                return result;
            };
            HourRegistrationCarrier.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["hourRegistrationId"] = this.hourRegistrationId;
                data["hourRegistration"] = this.hourRegistration ? this.hourRegistration.toJSON() : undefined;
                data["carrierId"] = this.carrierId;
                data["carrier"] = this.carrier ? this.carrier.toJSON() : undefined;
                return data;
            };
            return HourRegistrationCarrier;
        }());
        API.HourRegistrationCarrier = HourRegistrationCarrier;
        var HourRegistrationCarrierCreate = /** @class */ (function () {
            function HourRegistrationCarrierCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistrationCarrierCreate.prototype.init = function (_data) {
                if (_data) {
                    this.carrierId = _data["carrierId"];
                }
            };
            HourRegistrationCarrierCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistrationCarrierCreate();
                result.init(data);
                return result;
            };
            HourRegistrationCarrierCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["carrierId"] = this.carrierId;
                return data;
            };
            return HourRegistrationCarrierCreate;
        }());
        API.HourRegistrationCarrierCreate = HourRegistrationCarrierCreate;
        var HourRegistrationCreate = /** @class */ (function () {
            function HourRegistrationCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistrationCreate.prototype.init = function (_data) {
                if (_data) {
                    this.externalId = _data["externalId"];
                    this.masterRefId = _data["masterRefId"];
                    this.hourDate = _data["hourDate"] ? new Date(_data["hourDate"].toString()) : undefined;
                    this.hourCount = _data["hourCount"];
                    this.hourPrice = _data["hourPrice"];
                    this.hoursInvoiced = _data["hoursInvoiced"];
                    this.totalPrice = _data["totalPrice"];
                    this.description = _data["description"];
                    this.articleId = _data["articleId"];
                    if (Array.isArray(_data["carriers"])) {
                        this.carriers = [];
                        for (var _i = 0, _a = _data["carriers"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.carriers.push(HourRegistrationCarrierCreate.fromJS(item));
                        }
                    }
                    this.customerId = _data["customerId"];
                }
            };
            HourRegistrationCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistrationCreate();
                result.init(data);
                return result;
            };
            HourRegistrationCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["externalId"] = this.externalId;
                data["masterRefId"] = this.masterRefId;
                data["hourDate"] = this.hourDate ? this.hourDate.toISOString() : undefined;
                data["hourCount"] = this.hourCount;
                data["hourPrice"] = this.hourPrice;
                data["hoursInvoiced"] = this.hoursInvoiced;
                data["totalPrice"] = this.totalPrice;
                data["description"] = this.description;
                data["articleId"] = this.articleId;
                if (Array.isArray(this.carriers)) {
                    data["carriers"] = [];
                    for (var _i = 0, _a = this.carriers; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["carriers"].push(item.toJSON());
                    }
                }
                data["customerId"] = this.customerId;
                return data;
            };
            return HourRegistrationCreate;
        }());
        API.HourRegistrationCreate = HourRegistrationCreate;
        var HourRegistrationDocument = /** @class */ (function () {
            function HourRegistrationDocument(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistrationDocument.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.documentReference = _data["documentReference"];
                    this.fileName = _data["fileName"];
                    this.fileData = _data["fileData"];
                    this.fileType = _data["fileType"];
                }
            };
            HourRegistrationDocument.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistrationDocument();
                result.init(data);
                return result;
            };
            HourRegistrationDocument.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["documentReference"] = this.documentReference;
                data["fileName"] = this.fileName;
                data["fileData"] = this.fileData;
                data["fileType"] = this.fileType;
                return data;
            };
            return HourRegistrationDocument;
        }());
        API.HourRegistrationDocument = HourRegistrationDocument;
        var HourRegistrationDocumentCreate = /** @class */ (function () {
            function HourRegistrationDocumentCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            HourRegistrationDocumentCreate.prototype.init = function (_data) {
                if (_data) {
                    this.fileName = _data["fileName"];
                    this.fileData = _data["fileData"];
                    this.hourRegistrationId = _data["hourRegistrationId"];
                }
            };
            HourRegistrationDocumentCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new HourRegistrationDocumentCreate();
                result.init(data);
                return result;
            };
            HourRegistrationDocumentCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["fileName"] = this.fileName;
                data["fileData"] = this.fileData;
                data["hourRegistrationId"] = this.hourRegistrationId;
                return data;
            };
            return HourRegistrationDocumentCreate;
        }());
        API.HourRegistrationDocumentCreate = HourRegistrationDocumentCreate;
        var InvoiceStatus;
        (function (InvoiceStatus) {
            InvoiceStatus["ToBeInvoiced"] = "toBeInvoiced";
            InvoiceStatus["NoInvoice"] = "noInvoice";
            InvoiceStatus["Approved"] = "approved";
            InvoiceStatus["Rejected"] = "rejected";
        })(InvoiceStatus = API.InvoiceStatus || (API.InvoiceStatus = {}));
        var JsonPatchOperation = /** @class */ (function () {
            function JsonPatchOperation(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JsonPatchOperation.prototype.init = function (_data) {
                if (_data) {
                    this.op = _data["op"];
                    this.value = _data["value"];
                    this.from = _data["from"];
                    this.path = _data["path"];
                }
            };
            JsonPatchOperation.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new JsonPatchOperation();
                result.init(data);
                return result;
            };
            JsonPatchOperation.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["op"] = this.op;
                data["value"] = this.value;
                data["from"] = this.from;
                data["path"] = this.path;
                return data;
            };
            return JsonPatchOperation;
        }());
        API.JsonPatchOperation = JsonPatchOperation;
        var JsonPatchOperationType;
        (function (JsonPatchOperationType) {
            JsonPatchOperationType["Add"] = "add";
            JsonPatchOperationType["Remove"] = "remove";
            JsonPatchOperationType["Replace"] = "replace";
            JsonPatchOperationType["Move"] = "move";
            JsonPatchOperationType["Copy"] = "copy";
            JsonPatchOperationType["Test"] = "test";
        })(JsonPatchOperationType = API.JsonPatchOperationType || (API.JsonPatchOperationType = {}));
        var ProblemDetails = /** @class */ (function () {
            function ProblemDetails(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ProblemDetails.prototype.init = function (_data) {
                if (_data) {
                    this.type = _data["type"];
                    this.title = _data["title"];
                    this.status = _data["status"];
                    this.detail = _data["detail"];
                    this.instance = _data["instance"];
                }
            };
            ProblemDetails.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ProblemDetails();
                result.init(data);
                return result;
            };
            ProblemDetails.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["type"] = this.type;
                data["title"] = this.title;
                data["status"] = this.status;
                data["detail"] = this.detail;
                data["instance"] = this.instance;
                return data;
            };
            return ProblemDetails;
        }());
        API.ProblemDetails = ProblemDetails;
        var Project = /** @class */ (function () {
            function Project(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
                if (!data) {
                    this.carrier = new Carrier();
                }
            }
            Project.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
                    this.carrier = _data["carrier"] ? Carrier.fromJS(_data["carrier"]) : new Carrier();
                    this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
                    this.actualEndDate = _data["actualEndDate"] ? new Date(_data["actualEndDate"].toString()) : undefined;
                    this.contractSum = _data["contractSum"];
                    this.description = _data["description"];
                    this.customer = _data["customer"] ? Customer.fromJS(_data["customer"]) : undefined;
                    this.projectLeader = _data["projectLeader"] ? Carrier.fromJS(_data["projectLeader"]) : undefined;
                    this.rowversion = _data["rowversion"];
                }
            };
            Project.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new Project();
                result.init(data);
                return result;
            };
            Project.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
                data["carrier"] = this.carrier ? this.carrier.toJSON() : undefined;
                data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
                data["actualEndDate"] = this.actualEndDate ? this.actualEndDate.toISOString() : undefined;
                data["contractSum"] = this.contractSum;
                data["description"] = this.description;
                data["customer"] = this.customer ? this.customer.toJSON() : undefined;
                data["projectLeader"] = this.projectLeader ? this.projectLeader.toJSON() : undefined;
                data["rowversion"] = this.rowversion;
                return data;
            };
            return Project;
        }());
        API.Project = Project;
        var ProjectCarrierCreate = /** @class */ (function () {
            function ProjectCarrierCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ProjectCarrierCreate.prototype.init = function (_data) {
                if (_data) {
                    this.name = _data["name"];
                    this.key = _data["key"];
                }
            };
            ProjectCarrierCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ProjectCarrierCreate();
                result.init(data);
                return result;
            };
            ProjectCarrierCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["name"] = this.name;
                data["key"] = this.key;
                return data;
            };
            return ProjectCarrierCreate;
        }());
        API.ProjectCarrierCreate = ProjectCarrierCreate;
        var ProjectCreate = /** @class */ (function () {
            function ProjectCreate(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ProjectCreate.prototype.init = function (_data) {
                if (_data) {
                    this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined;
                    this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined;
                    this.actualEndDate = _data["actualEndDate"] ? new Date(_data["actualEndDate"].toString()) : undefined;
                    this.contractSum = _data["contractSum"];
                    this.description = _data["description"];
                    this.customerId = _data["customerId"];
                    this.projectLeaderCarrierId = _data["projectLeaderCarrierId"];
                    this.carrier = _data["carrier"] ? ProjectCarrierCreate.fromJS(_data["carrier"]) : undefined;
                }
            };
            ProjectCreate.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new ProjectCreate();
                result.init(data);
                return result;
            };
            ProjectCreate.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
                data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
                data["actualEndDate"] = this.actualEndDate ? this.actualEndDate.toISOString() : undefined;
                data["contractSum"] = this.contractSum;
                data["description"] = this.description;
                data["customerId"] = this.customerId;
                data["projectLeaderCarrierId"] = this.projectLeaderCarrierId;
                data["carrier"] = this.carrier ? this.carrier.toJSON() : undefined;
                return data;
            };
            return ProjectCreate;
        }());
        API.ProjectCreate = ProjectCreate;
        var SalaryStatus;
        (function (SalaryStatus) {
            SalaryStatus["Pending"] = "pending";
            SalaryStatus["Approved"] = "approved";
            SalaryStatus["Rejected"] = "rejected";
        })(SalaryStatus = API.SalaryStatus || (API.SalaryStatus = {}));
        var StreetAddress = /** @class */ (function () {
            function StreetAddress(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            StreetAddress.prototype.init = function (_data) {
                if (_data) {
                    this.address1 = _data["address1"];
                    this.address2 = _data["address2"];
                    this.address3 = _data["address3"];
                    this.isForeign = _data["isForeign"];
                    this.zipCodeKey = _data["zipCodeKey"];
                    this.zipCodeName = _data["zipCodeName"];
                    this.country = _data["country"];
                }
            };
            StreetAddress.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new StreetAddress();
                result.init(data);
                return result;
            };
            StreetAddress.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["address1"] = this.address1;
                data["address2"] = this.address2;
                data["address3"] = this.address3;
                data["isForeign"] = this.isForeign;
                data["zipCodeKey"] = this.zipCodeKey;
                data["zipCodeName"] = this.zipCodeName;
                data["country"] = this.country;
                return data;
            };
            return StreetAddress;
        }());
        API.StreetAddress = StreetAddress;
        var WageType = /** @class */ (function () {
            function WageType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            WageType.prototype.init = function (_data) {
                if (_data) {
                    this.id = _data["id"];
                    this.typeId = _data["typeId"];
                    this.typeName = _data["typeName"];
                }
            };
            WageType.fromJS = function (data) {
                data = typeof data === 'object' ? data : {};
                var result = new WageType();
                result.init(data);
                return result;
            };
            WageType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id;
                data["typeId"] = this.typeId;
                data["typeName"] = this.typeName;
                return data;
            };
            return WageType;
        }());
        API.WageType = WageType;
        var ApiException = /** @class */ (function (_super) {
            __extends(ApiException, _super);
            function ApiException(message, status, response, headers, result) {
                var _this = _super.call(this) || this;
                _this.isApiException = true;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.headers = headers;
                _this.result = result;
                return _this;
            }
            ApiException.isApiException = function (obj) {
                return obj.isApiException === true;
            };
            return ApiException;
        }(Error));
        API.ApiException = ApiException;
        function throwException(message, status, response, headers, result) {
            if (result !== null && result !== undefined)
                throw result;
            else
                throw new ApiException(message, status, response, headers, null);
        }
    })(API = Duett.API || (Duett.API = {}));
})(Duett || (Duett = {}));
//# sourceMappingURL=Client.js.map