# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Employee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'address1': 'str',
        'address2': 'str',
        'email': 'str',
        'phone_private': 'str',
        'phone_mobile': 'str',
        'rowversion': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address1': 'address1',
        'address2': 'address2',
        'email': 'email',
        'phone_private': 'phonePrivate',
        'phone_mobile': 'phoneMobile',
        'rowversion': 'rowversion'
    }

    def __init__(self, id=None, name=None, address1=None, address2=None, email=None, phone_private=None, phone_mobile=None, rowversion=None):  # noqa: E501
        """Employee - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._address1 = None
        self._address2 = None
        self._email = None
        self._phone_private = None
        self._phone_mobile = None
        self._rowversion = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if email is not None:
            self.email = email
        if phone_private is not None:
            self.phone_private = phone_private
        if phone_mobile is not None:
            self.phone_mobile = phone_mobile
        if rowversion is not None:
            self.rowversion = rowversion

    @property
    def id(self):
        """Gets the id of this Employee.  # noqa: E501


        :return: The id of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employee.


        :param id: The id of this Employee.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Employee.  # noqa: E501


        :return: The name of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Employee.


        :param name: The name of this Employee.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address1(self):
        """Gets the address1 of this Employee.  # noqa: E501


        :return: The address1 of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Employee.


        :param address1: The address1 of this Employee.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Employee.  # noqa: E501


        :return: The address2 of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Employee.


        :param address2: The address2 of this Employee.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def email(self):
        """Gets the email of this Employee.  # noqa: E501


        :return: The email of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Employee.


        :param email: The email of this Employee.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_private(self):
        """Gets the phone_private of this Employee.  # noqa: E501


        :return: The phone_private of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._phone_private

    @phone_private.setter
    def phone_private(self, phone_private):
        """Sets the phone_private of this Employee.


        :param phone_private: The phone_private of this Employee.  # noqa: E501
        :type: str
        """

        self._phone_private = phone_private

    @property
    def phone_mobile(self):
        """Gets the phone_mobile of this Employee.  # noqa: E501


        :return: The phone_mobile of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._phone_mobile

    @phone_mobile.setter
    def phone_mobile(self, phone_mobile):
        """Sets the phone_mobile of this Employee.


        :param phone_mobile: The phone_mobile of this Employee.  # noqa: E501
        :type: str
        """

        self._phone_mobile = phone_mobile

    @property
    def rowversion(self):
        """Gets the rowversion of this Employee.  # noqa: E501


        :return: The rowversion of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._rowversion

    @rowversion.setter
    def rowversion(self, rowversion):
        """Sets the rowversion of this Employee.


        :param rowversion: The rowversion of this Employee.  # noqa: E501
        :type: int
        """

        self._rowversion = rowversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Employee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
