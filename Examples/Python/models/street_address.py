# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StreetAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'address3': 'str',
        'is_foreign': 'bool',
        'zip_code_key': 'str',
        'zip_code_name': 'str',
        'country': 'str'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'is_foreign': 'isForeign',
        'zip_code_key': 'zipCodeKey',
        'zip_code_name': 'zipCodeName',
        'country': 'country'
    }

    def __init__(self, address1=None, address2=None, address3=None, is_foreign=None, zip_code_key=None, zip_code_name=None, country=None):  # noqa: E501
        """StreetAddress - a model defined in Swagger"""  # noqa: E501
        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._is_foreign = None
        self._zip_code_key = None
        self._zip_code_name = None
        self._country = None
        self.discriminator = None
        self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if is_foreign is not None:
            self.is_foreign = is_foreign
        if zip_code_key is not None:
            self.zip_code_key = zip_code_key
        if zip_code_name is not None:
            self.zip_code_name = zip_code_name
        if country is not None:
            self.country = country

    @property
    def address1(self):
        """Gets the address1 of this StreetAddress.  # noqa: E501


        :return: The address1 of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this StreetAddress.


        :param address1: The address1 of this StreetAddress.  # noqa: E501
        :type: str
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this StreetAddress.  # noqa: E501


        :return: The address2 of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this StreetAddress.


        :param address2: The address2 of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this StreetAddress.  # noqa: E501


        :return: The address3 of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this StreetAddress.


        :param address3: The address3 of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._address3 = address3

    @property
    def is_foreign(self):
        """Gets the is_foreign of this StreetAddress.  # noqa: E501


        :return: The is_foreign of this StreetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_foreign

    @is_foreign.setter
    def is_foreign(self, is_foreign):
        """Sets the is_foreign of this StreetAddress.


        :param is_foreign: The is_foreign of this StreetAddress.  # noqa: E501
        :type: bool
        """

        self._is_foreign = is_foreign

    @property
    def zip_code_key(self):
        """Gets the zip_code_key of this StreetAddress.  # noqa: E501


        :return: The zip_code_key of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_code_key

    @zip_code_key.setter
    def zip_code_key(self, zip_code_key):
        """Sets the zip_code_key of this StreetAddress.


        :param zip_code_key: The zip_code_key of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._zip_code_key = zip_code_key

    @property
    def zip_code_name(self):
        """Gets the zip_code_name of this StreetAddress.  # noqa: E501


        :return: The zip_code_name of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_code_name

    @zip_code_name.setter
    def zip_code_name(self, zip_code_name):
        """Sets the zip_code_name of this StreetAddress.


        :param zip_code_name: The zip_code_name of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._zip_code_name = zip_code_name

    @property
    def country(self):
        """Gets the country of this StreetAddress.  # noqa: E501


        :return: The country of this StreetAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this StreetAddress.


        :param country: The country of this StreetAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StreetAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreetAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
