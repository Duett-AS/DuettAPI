# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HourRegistrationDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'document_reference': 'str',
        'file_name': 'str',
        'file_data': 'str',
        'file_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'document_reference': 'documentReference',
        'file_name': 'fileName',
        'file_data': 'fileData',
        'file_type': 'fileType'
    }

    def __init__(self, id=None, document_reference=None, file_name=None, file_data=None, file_type=None):  # noqa: E501
        """HourRegistrationDocument - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._document_reference = None
        self._file_name = None
        self._file_data = None
        self._file_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if document_reference is not None:
            self.document_reference = document_reference
        self.file_name = file_name
        if file_data is not None:
            self.file_data = file_data
        if file_type is not None:
            self.file_type = file_type

    @property
    def id(self):
        """Gets the id of this HourRegistrationDocument.  # noqa: E501


        :return: The id of this HourRegistrationDocument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HourRegistrationDocument.


        :param id: The id of this HourRegistrationDocument.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def document_reference(self):
        """Gets the document_reference of this HourRegistrationDocument.  # noqa: E501


        :return: The document_reference of this HourRegistrationDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_reference

    @document_reference.setter
    def document_reference(self, document_reference):
        """Sets the document_reference of this HourRegistrationDocument.


        :param document_reference: The document_reference of this HourRegistrationDocument.  # noqa: E501
        :type: str
        """

        self._document_reference = document_reference

    @property
    def file_name(self):
        """Gets the file_name of this HourRegistrationDocument.  # noqa: E501


        :return: The file_name of this HourRegistrationDocument.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this HourRegistrationDocument.


        :param file_name: The file_name of this HourRegistrationDocument.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_data(self):
        """Gets the file_data of this HourRegistrationDocument.  # noqa: E501


        :return: The file_data of this HourRegistrationDocument.  # noqa: E501
        :rtype: str
        """
        return self._file_data

    @file_data.setter
    def file_data(self, file_data):
        """Sets the file_data of this HourRegistrationDocument.


        :param file_data: The file_data of this HourRegistrationDocument.  # noqa: E501
        :type: str
        """

        self._file_data = file_data

    @property
    def file_type(self):
        """Gets the file_type of this HourRegistrationDocument.  # noqa: E501


        :return: The file_type of this HourRegistrationDocument.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this HourRegistrationDocument.


        :param file_type: The file_type of this HourRegistrationDocument.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HourRegistrationDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HourRegistrationDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
