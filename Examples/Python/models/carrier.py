# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Carrier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'key': 'str',
        'carrier_type_id': 'int',
        'carrier_type': 'CarrierType',
        'employee': 'Employee',
        'project': 'Project',
        'department': 'Department',
        'wage_type': 'WageType',
        'hour_registrations': 'list[HourRegistrationCarrier]',
        'show': 'bool',
        'rowversion': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'key': 'key',
        'carrier_type_id': 'carrierTypeId',
        'carrier_type': 'carrierType',
        'employee': 'employee',
        'project': 'project',
        'department': 'department',
        'wage_type': 'wageType',
        'hour_registrations': 'hourRegistrations',
        'show': 'show',
        'rowversion': 'rowversion'
    }

    def __init__(self, id=None, name=None, key=None, carrier_type_id=None, carrier_type=None, employee=None, project=None, department=None, wage_type=None, hour_registrations=None, show=None, rowversion=None):  # noqa: E501
        """Carrier - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._key = None
        self._carrier_type_id = None
        self._carrier_type = None
        self._employee = None
        self._project = None
        self._department = None
        self._wage_type = None
        self._hour_registrations = None
        self._show = None
        self._rowversion = None
        self.discriminator = None
        self.id = id
        self.name = name
        if key is not None:
            self.key = key
        self.carrier_type_id = carrier_type_id
        if carrier_type is not None:
            self.carrier_type = carrier_type
        if employee is not None:
            self.employee = employee
        if project is not None:
            self.project = project
        if department is not None:
            self.department = department
        if wage_type is not None:
            self.wage_type = wage_type
        if hour_registrations is not None:
            self.hour_registrations = hour_registrations
        if show is not None:
            self.show = show
        if rowversion is not None:
            self.rowversion = rowversion

    @property
    def id(self):
        """Gets the id of this Carrier.  # noqa: E501


        :return: The id of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Carrier.


        :param id: The id of this Carrier.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Carrier.  # noqa: E501


        :return: The name of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Carrier.


        :param name: The name of this Carrier.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def key(self):
        """Gets the key of this Carrier.  # noqa: E501


        :return: The key of this Carrier.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Carrier.


        :param key: The key of this Carrier.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def carrier_type_id(self):
        """Gets the carrier_type_id of this Carrier.  # noqa: E501


        :return: The carrier_type_id of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._carrier_type_id

    @carrier_type_id.setter
    def carrier_type_id(self, carrier_type_id):
        """Sets the carrier_type_id of this Carrier.


        :param carrier_type_id: The carrier_type_id of this Carrier.  # noqa: E501
        :type: int
        """
        if carrier_type_id is None:
            raise ValueError("Invalid value for `carrier_type_id`, must not be `None`")  # noqa: E501

        self._carrier_type_id = carrier_type_id

    @property
    def carrier_type(self):
        """Gets the carrier_type of this Carrier.  # noqa: E501


        :return: The carrier_type of this Carrier.  # noqa: E501
        :rtype: CarrierType
        """
        return self._carrier_type

    @carrier_type.setter
    def carrier_type(self, carrier_type):
        """Sets the carrier_type of this Carrier.


        :param carrier_type: The carrier_type of this Carrier.  # noqa: E501
        :type: CarrierType
        """

        self._carrier_type = carrier_type

    @property
    def employee(self):
        """Gets the employee of this Carrier.  # noqa: E501


        :return: The employee of this Carrier.  # noqa: E501
        :rtype: Employee
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Carrier.


        :param employee: The employee of this Carrier.  # noqa: E501
        :type: Employee
        """

        self._employee = employee

    @property
    def project(self):
        """Gets the project of this Carrier.  # noqa: E501


        :return: The project of this Carrier.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Carrier.


        :param project: The project of this Carrier.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def department(self):
        """Gets the department of this Carrier.  # noqa: E501


        :return: The department of this Carrier.  # noqa: E501
        :rtype: Department
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Carrier.


        :param department: The department of this Carrier.  # noqa: E501
        :type: Department
        """

        self._department = department

    @property
    def wage_type(self):
        """Gets the wage_type of this Carrier.  # noqa: E501


        :return: The wage_type of this Carrier.  # noqa: E501
        :rtype: WageType
        """
        return self._wage_type

    @wage_type.setter
    def wage_type(self, wage_type):
        """Sets the wage_type of this Carrier.


        :param wage_type: The wage_type of this Carrier.  # noqa: E501
        :type: WageType
        """

        self._wage_type = wage_type

    @property
    def hour_registrations(self):
        """Gets the hour_registrations of this Carrier.  # noqa: E501


        :return: The hour_registrations of this Carrier.  # noqa: E501
        :rtype: list[HourRegistrationCarrier]
        """
        return self._hour_registrations

    @hour_registrations.setter
    def hour_registrations(self, hour_registrations):
        """Sets the hour_registrations of this Carrier.


        :param hour_registrations: The hour_registrations of this Carrier.  # noqa: E501
        :type: list[HourRegistrationCarrier]
        """

        self._hour_registrations = hour_registrations

    @property
    def show(self):
        """Gets the show of this Carrier.  # noqa: E501

        false if soft deleted  # noqa: E501

        :return: The show of this Carrier.  # noqa: E501
        :rtype: bool
        """
        return self._show

    @show.setter
    def show(self, show):
        """Sets the show of this Carrier.

        false if soft deleted  # noqa: E501

        :param show: The show of this Carrier.  # noqa: E501
        :type: bool
        """

        self._show = show

    @property
    def rowversion(self):
        """Gets the rowversion of this Carrier.  # noqa: E501


        :return: The rowversion of this Carrier.  # noqa: E501
        :rtype: int
        """
        return self._rowversion

    @rowversion.setter
    def rowversion(self, rowversion):
        """Sets the rowversion of this Carrier.


        :param rowversion: The rowversion of this Carrier.  # noqa: E501
        :type: int
        """

        self._rowversion = rowversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Carrier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Carrier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
