# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArticleMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'ean': 'str',
        'net_weight': 'float',
        'gross_weight': 'float',
        'net_volume': 'float',
        'gross_volume': 'float',
        'article_id': 'int'
    }

    attribute_map = {
        'description': 'description',
        'ean': 'ean',
        'net_weight': 'netWeight',
        'gross_weight': 'grossWeight',
        'net_volume': 'netVolume',
        'gross_volume': 'grossVolume',
        'article_id': 'articleId'
    }

    def __init__(self, description=None, ean=None, net_weight=None, gross_weight=None, net_volume=None, gross_volume=None, article_id=None):  # noqa: E501
        """ArticleMetadata - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._ean = None
        self._net_weight = None
        self._gross_weight = None
        self._net_volume = None
        self._gross_volume = None
        self._article_id = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if ean is not None:
            self.ean = ean
        if net_weight is not None:
            self.net_weight = net_weight
        if gross_weight is not None:
            self.gross_weight = gross_weight
        if net_volume is not None:
            self.net_volume = net_volume
        if gross_volume is not None:
            self.gross_volume = gross_volume
        if article_id is not None:
            self.article_id = article_id

    @property
    def description(self):
        """Gets the description of this ArticleMetadata.  # noqa: E501


        :return: The description of this ArticleMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleMetadata.


        :param description: The description of this ArticleMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ean(self):
        """Gets the ean of this ArticleMetadata.  # noqa: E501


        :return: The ean of this ArticleMetadata.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ArticleMetadata.


        :param ean: The ean of this ArticleMetadata.  # noqa: E501
        :type: str
        """

        self._ean = ean

    @property
    def net_weight(self):
        """Gets the net_weight of this ArticleMetadata.  # noqa: E501


        :return: The net_weight of this ArticleMetadata.  # noqa: E501
        :rtype: float
        """
        return self._net_weight

    @net_weight.setter
    def net_weight(self, net_weight):
        """Sets the net_weight of this ArticleMetadata.


        :param net_weight: The net_weight of this ArticleMetadata.  # noqa: E501
        :type: float
        """

        self._net_weight = net_weight

    @property
    def gross_weight(self):
        """Gets the gross_weight of this ArticleMetadata.  # noqa: E501


        :return: The gross_weight of this ArticleMetadata.  # noqa: E501
        :rtype: float
        """
        return self._gross_weight

    @gross_weight.setter
    def gross_weight(self, gross_weight):
        """Sets the gross_weight of this ArticleMetadata.


        :param gross_weight: The gross_weight of this ArticleMetadata.  # noqa: E501
        :type: float
        """

        self._gross_weight = gross_weight

    @property
    def net_volume(self):
        """Gets the net_volume of this ArticleMetadata.  # noqa: E501


        :return: The net_volume of this ArticleMetadata.  # noqa: E501
        :rtype: float
        """
        return self._net_volume

    @net_volume.setter
    def net_volume(self, net_volume):
        """Sets the net_volume of this ArticleMetadata.


        :param net_volume: The net_volume of this ArticleMetadata.  # noqa: E501
        :type: float
        """

        self._net_volume = net_volume

    @property
    def gross_volume(self):
        """Gets the gross_volume of this ArticleMetadata.  # noqa: E501


        :return: The gross_volume of this ArticleMetadata.  # noqa: E501
        :rtype: float
        """
        return self._gross_volume

    @gross_volume.setter
    def gross_volume(self, gross_volume):
        """Sets the gross_volume of this ArticleMetadata.


        :param gross_volume: The gross_volume of this ArticleMetadata.  # noqa: E501
        :type: float
        """

        self._gross_volume = gross_volume

    @property
    def article_id(self):
        """Gets the article_id of this ArticleMetadata.  # noqa: E501


        :return: The article_id of this ArticleMetadata.  # noqa: E501
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this ArticleMetadata.


        :param article_id: The article_id of this ArticleMetadata.  # noqa: E501
        :type: int
        """

        self._article_id = article_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
