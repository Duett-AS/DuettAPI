# coding: utf-8

"""
    OpenApi

     ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HourRegistrationCarrier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hour_registration_id': 'int',
        'hour_registration': 'HourRegistration',
        'carrier_id': 'int',
        'carrier': 'Carrier'
    }

    attribute_map = {
        'hour_registration_id': 'hourRegistrationId',
        'hour_registration': 'hourRegistration',
        'carrier_id': 'carrierId',
        'carrier': 'carrier'
    }

    def __init__(self, hour_registration_id=None, hour_registration=None, carrier_id=None, carrier=None):  # noqa: E501
        """HourRegistrationCarrier - a model defined in Swagger"""  # noqa: E501
        self._hour_registration_id = None
        self._hour_registration = None
        self._carrier_id = None
        self._carrier = None
        self.discriminator = None
        if hour_registration_id is not None:
            self.hour_registration_id = hour_registration_id
        if hour_registration is not None:
            self.hour_registration = hour_registration
        if carrier_id is not None:
            self.carrier_id = carrier_id
        if carrier is not None:
            self.carrier = carrier

    @property
    def hour_registration_id(self):
        """Gets the hour_registration_id of this HourRegistrationCarrier.  # noqa: E501


        :return: The hour_registration_id of this HourRegistrationCarrier.  # noqa: E501
        :rtype: int
        """
        return self._hour_registration_id

    @hour_registration_id.setter
    def hour_registration_id(self, hour_registration_id):
        """Sets the hour_registration_id of this HourRegistrationCarrier.


        :param hour_registration_id: The hour_registration_id of this HourRegistrationCarrier.  # noqa: E501
        :type: int
        """

        self._hour_registration_id = hour_registration_id

    @property
    def hour_registration(self):
        """Gets the hour_registration of this HourRegistrationCarrier.  # noqa: E501


        :return: The hour_registration of this HourRegistrationCarrier.  # noqa: E501
        :rtype: HourRegistration
        """
        return self._hour_registration

    @hour_registration.setter
    def hour_registration(self, hour_registration):
        """Sets the hour_registration of this HourRegistrationCarrier.


        :param hour_registration: The hour_registration of this HourRegistrationCarrier.  # noqa: E501
        :type: HourRegistration
        """

        self._hour_registration = hour_registration

    @property
    def carrier_id(self):
        """Gets the carrier_id of this HourRegistrationCarrier.  # noqa: E501


        :return: The carrier_id of this HourRegistrationCarrier.  # noqa: E501
        :rtype: int
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this HourRegistrationCarrier.


        :param carrier_id: The carrier_id of this HourRegistrationCarrier.  # noqa: E501
        :type: int
        """

        self._carrier_id = carrier_id

    @property
    def carrier(self):
        """Gets the carrier of this HourRegistrationCarrier.  # noqa: E501


        :return: The carrier of this HourRegistrationCarrier.  # noqa: E501
        :rtype: Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this HourRegistrationCarrier.


        :param carrier: The carrier of this HourRegistrationCarrier.  # noqa: E501
        :type: Carrier
        """

        self._carrier = carrier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HourRegistrationCarrier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HourRegistrationCarrier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
