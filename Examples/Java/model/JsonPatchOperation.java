/*
 * OpenApi
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.JsonPatchOperationType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * JsonPatchOperation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-25T13:43:16.684Z[GMT]")
public class JsonPatchOperation {
  @SerializedName("op")
  private JsonPatchOperationType op = null;

  @SerializedName("value")
  private Object value = null;

  @SerializedName("from")
  private Object from = null;

  @SerializedName("path")
  private String path = null;

  public JsonPatchOperation op(JsonPatchOperationType op) {
    this.op = op;
    return this;
  }

   /**
   * Get op
   * @return op
  **/
  @Schema(description = "")
  public JsonPatchOperationType getOp() {
    return op;
  }

  public void setOp(JsonPatchOperationType op) {
    this.op = op;
  }

  public JsonPatchOperation value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @Schema(description = "")
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }

  public JsonPatchOperation from(Object from) {
    this.from = from;
    return this;
  }

   /**
   * Only used in move
   * @return from
  **/
  @Schema(description = "Only used in move")
  public Object getFrom() {
    return from;
  }

  public void setFrom(Object from) {
    this.from = from;
  }

  public JsonPatchOperation path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonPatchOperation jsonPatchOperation = (JsonPatchOperation) o;
    return Objects.equals(this.op, jsonPatchOperation.op) &&
        Objects.equals(this.value, jsonPatchOperation.value) &&
        Objects.equals(this.from, jsonPatchOperation.from) &&
        Objects.equals(this.path, jsonPatchOperation.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(op, value, from, path);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonPatchOperation {\n");
    
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
