/*
 * OpenApi
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CarrierTypeCreate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-25T13:43:16.684Z[GMT]")
public class CarrierTypeCreate {
  @SerializedName("name")
  private String name = null;

  @SerializedName("usedInAccounting")
  private Boolean usedInAccounting = null;

  @SerializedName("usedInHour")
  private Boolean usedInHour = null;

  @SerializedName("usedInInvoice")
  private Boolean usedInInvoice = null;

  @SerializedName("usedInLedger")
  private Boolean usedInLedger = null;

  @SerializedName("usedInSalary")
  private Boolean usedInSalary = null;

  public CarrierTypeCreate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CarrierTypeCreate usedInAccounting(Boolean usedInAccounting) {
    this.usedInAccounting = usedInAccounting;
    return this;
  }

   /**
   * Get usedInAccounting
   * @return usedInAccounting
  **/
  @Schema(required = true, description = "")
  public Boolean isUsedInAccounting() {
    return usedInAccounting;
  }

  public void setUsedInAccounting(Boolean usedInAccounting) {
    this.usedInAccounting = usedInAccounting;
  }

  public CarrierTypeCreate usedInHour(Boolean usedInHour) {
    this.usedInHour = usedInHour;
    return this;
  }

   /**
   * Get usedInHour
   * @return usedInHour
  **/
  @Schema(required = true, description = "")
  public Boolean isUsedInHour() {
    return usedInHour;
  }

  public void setUsedInHour(Boolean usedInHour) {
    this.usedInHour = usedInHour;
  }

  public CarrierTypeCreate usedInInvoice(Boolean usedInInvoice) {
    this.usedInInvoice = usedInInvoice;
    return this;
  }

   /**
   * Get usedInInvoice
   * @return usedInInvoice
  **/
  @Schema(required = true, description = "")
  public Boolean isUsedInInvoice() {
    return usedInInvoice;
  }

  public void setUsedInInvoice(Boolean usedInInvoice) {
    this.usedInInvoice = usedInInvoice;
  }

  public CarrierTypeCreate usedInLedger(Boolean usedInLedger) {
    this.usedInLedger = usedInLedger;
    return this;
  }

   /**
   * Get usedInLedger
   * @return usedInLedger
  **/
  @Schema(required = true, description = "")
  public Boolean isUsedInLedger() {
    return usedInLedger;
  }

  public void setUsedInLedger(Boolean usedInLedger) {
    this.usedInLedger = usedInLedger;
  }

  public CarrierTypeCreate usedInSalary(Boolean usedInSalary) {
    this.usedInSalary = usedInSalary;
    return this;
  }

   /**
   * Get usedInSalary
   * @return usedInSalary
  **/
  @Schema(required = true, description = "")
  public Boolean isUsedInSalary() {
    return usedInSalary;
  }

  public void setUsedInSalary(Boolean usedInSalary) {
    this.usedInSalary = usedInSalary;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarrierTypeCreate carrierTypeCreate = (CarrierTypeCreate) o;
    return Objects.equals(this.name, carrierTypeCreate.name) &&
        Objects.equals(this.usedInAccounting, carrierTypeCreate.usedInAccounting) &&
        Objects.equals(this.usedInHour, carrierTypeCreate.usedInHour) &&
        Objects.equals(this.usedInInvoice, carrierTypeCreate.usedInInvoice) &&
        Objects.equals(this.usedInLedger, carrierTypeCreate.usedInLedger) &&
        Objects.equals(this.usedInSalary, carrierTypeCreate.usedInSalary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, usedInAccounting, usedInHour, usedInInvoice, usedInLedger, usedInSalary);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarrierTypeCreate {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usedInAccounting: ").append(toIndentedString(usedInAccounting)).append("\n");
    sb.append("    usedInHour: ").append(toIndentedString(usedInHour)).append("\n");
    sb.append("    usedInInvoice: ").append(toIndentedString(usedInInvoice)).append("\n");
    sb.append("    usedInLedger: ").append(toIndentedString(usedInLedger)).append("\n");
    sb.append("    usedInSalary: ").append(toIndentedString(usedInSalary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
