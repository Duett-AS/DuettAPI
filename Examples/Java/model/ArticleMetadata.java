/*
 * OpenApi
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ArticleMetadata
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-11-25T13:43:16.684Z[GMT]")
public class ArticleMetadata {
  @SerializedName("description")
  private String description = null;

  @SerializedName("ean")
  private String ean = null;

  @SerializedName("netWeight")
  private Double netWeight = null;

  @SerializedName("grossWeight")
  private Double grossWeight = null;

  @SerializedName("netVolume")
  private Double netVolume = null;

  @SerializedName("grossVolume")
  private Double grossVolume = null;

  @SerializedName("articleId")
  private Integer articleId = null;

  public ArticleMetadata description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ArticleMetadata ean(String ean) {
    this.ean = ean;
    return this;
  }

   /**
   * Get ean
   * @return ean
  **/
  @Schema(description = "")
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }

  public ArticleMetadata netWeight(Double netWeight) {
    this.netWeight = netWeight;
    return this;
  }

   /**
   * Get netWeight
   * @return netWeight
  **/
  @Schema(description = "")
  public Double getNetWeight() {
    return netWeight;
  }

  public void setNetWeight(Double netWeight) {
    this.netWeight = netWeight;
  }

  public ArticleMetadata grossWeight(Double grossWeight) {
    this.grossWeight = grossWeight;
    return this;
  }

   /**
   * Get grossWeight
   * @return grossWeight
  **/
  @Schema(description = "")
  public Double getGrossWeight() {
    return grossWeight;
  }

  public void setGrossWeight(Double grossWeight) {
    this.grossWeight = grossWeight;
  }

  public ArticleMetadata netVolume(Double netVolume) {
    this.netVolume = netVolume;
    return this;
  }

   /**
   * Get netVolume
   * @return netVolume
  **/
  @Schema(description = "")
  public Double getNetVolume() {
    return netVolume;
  }

  public void setNetVolume(Double netVolume) {
    this.netVolume = netVolume;
  }

  public ArticleMetadata grossVolume(Double grossVolume) {
    this.grossVolume = grossVolume;
    return this;
  }

   /**
   * Get grossVolume
   * @return grossVolume
  **/
  @Schema(description = "")
  public Double getGrossVolume() {
    return grossVolume;
  }

  public void setGrossVolume(Double grossVolume) {
    this.grossVolume = grossVolume;
  }

   /**
   * Get articleId
   * @return articleId
  **/
  @Schema(description = "")
  public Integer getArticleId() {
    return articleId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleMetadata articleMetadata = (ArticleMetadata) o;
    return Objects.equals(this.description, articleMetadata.description) &&
        Objects.equals(this.ean, articleMetadata.ean) &&
        Objects.equals(this.netWeight, articleMetadata.netWeight) &&
        Objects.equals(this.grossWeight, articleMetadata.grossWeight) &&
        Objects.equals(this.netVolume, articleMetadata.netVolume) &&
        Objects.equals(this.grossVolume, articleMetadata.grossVolume) &&
        Objects.equals(this.articleId, articleMetadata.articleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, ean, netWeight, grossWeight, netVolume, grossVolume, articleId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleMetadata {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    netWeight: ").append(toIndentedString(netWeight)).append("\n");
    sb.append("    grossWeight: ").append(toIndentedString(grossWeight)).append("\n");
    sb.append("    netVolume: ").append(toIndentedString(netVolume)).append("\n");
    sb.append("    grossVolume: ").append(toIndentedString(grossVolume)).append("\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
