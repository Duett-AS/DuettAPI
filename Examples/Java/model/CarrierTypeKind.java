/*
 * OpenApi
 *  ## ![N|Solid](https://duett.no/wp-content/uploads/2018/10/cropped-Duett-favicon-32x32.png)  _How to take the Duett api in use_  To be able to use the API, you must have an interaction key and a client key.  Eksample curl: ```swift    curl -X 'GET' \\   'https://api.duett.no/article/v1 \\   -H 'accept: application/json' \\   -H 'X-Api-Integration-Key: 89ff1c42-9d90-435a-8a94-20207bc06e1a' \\   -H 'X-Api-Client-Key: 7896feb3-aaa2-4fd2-aaa2-c69de5fd1e5f' ``` ##### [Metode description][1] ##### [Filtering data in openApi][2]   ### Use a code generator as to auto-generate api client:  ##### [NSwagStudio](https://github.com/RicoSuter/NSwag/wiki/NSwagStudio) ##### [Visual studio add-in](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) \\ ##### [Online code generator for many languages and versions](https://github.com/swagger-api/swagger-codegen)  *** [1]: ../metods-help.html [2]: ../query-help.html
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets CarrierTypeKind
 */
@JsonAdapter(CarrierTypeKind.Adapter.class)
public enum CarrierTypeKind {
  FREE("free"),
  PROJECT("project"),
  PRODUCTION("production"),
  EMPLOYEE("employee"),
  DEPARTMENT("department"),
  TASK("task"),
  ACTIVITY("activity"),
  YEAR("year"),
  PRODUCT("product"),
  TRADE("trade"),
  ASSET("asset"),
  COSTTYPE("costType"),
  WORKTYPE("workType"),
  CONTRACT("contract"),
  REALESTATE("realEstate"),
  PERSON("person"),
  ISSUER("issuer"),
  TEAM("team"),
  PRODUCT2("product2"),
  DETAIL("detail"),
  QUALITY("quality"),
  ADDITIONALTRAIT("additionalTrait"),
  ORGANIC("organic"),
  FORESTINFO("forestInfo"),
  WAGETYPE("wagetype"),
  WORKPLACELOCATION("workplaceLocation");

  private String value;

  CarrierTypeKind(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CarrierTypeKind fromValue(String text) {
    for (CarrierTypeKind b : CarrierTypeKind.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<CarrierTypeKind> {
    @Override
    public void write(final JsonWriter jsonWriter, final CarrierTypeKind enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CarrierTypeKind read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return CarrierTypeKind.fromValue(String.valueOf(value));
    }
  }
}
